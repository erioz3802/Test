{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "52f54eeb-4988-4153-9658-93f7f4d665ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Exception in Tkinter callback\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Program Files\\Python312\\Lib\\tkinter\\__init__.py\", line 1968, in __call__\n",
      "    return self.func(*args)\n",
      "           ^^^^^^^^^^^^^^^^\n",
      "  File \"C:\\Users\\c65917\\AppData\\Local\\Temp\\ipykernel_11572\\105619624.py\", line 196, in <lambda>\n",
      "    self.root.bind('<Return>', lambda event: self.authenticate_user())\n",
      "                                             ^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"C:\\Users\\c65917\\AppData\\Local\\Temp\\ipykernel_11572\\105619624.py\", line 228, in authenticate_user\n",
      "    self.show_main_application()\n",
      "  File \"C:\\Users\\c65917\\AppData\\Local\\Temp\\ipykernel_11572\\105619624.py\", line 276, in show_main_application\n",
      "    self.create_tabs()\n",
      "  File \"C:\\Users\\c65917\\AppData\\Local\\Temp\\ipykernel_11572\\105619624.py\", line 306, in create_tabs\n",
      "    self.add_search_filters()\n",
      "    ^^^^^^^^^^^^^^^^^^^^^^^\n",
      "AttributeError: 'SportsOfficialScheduler' object has no attribute 'add_search_filters'. Did you mean: 'apply_search_filter'?\n"
     ]
    }
   ],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import ttk, messagebox, filedialog\n",
    "import sqlite3\n",
    "import hashlib\n",
    "import csv\n",
    "from datetime import datetime, timedelta\n",
    "import re\n",
    "\n",
    "class SportsOfficialScheduler:\n",
    "    def __init__(self):\n",
    "        self.root = tk.Tk()\n",
    "        self.root.title(\"Sports Official Scheduler\")\n",
    "        self.root.geometry(\"1200x800\")\n",
    "        self.root.configure(bg='#f0f0f0')\n",
    "        \n",
    "        # Initialize database\n",
    "        self.init_database()\n",
    "        \n",
    "        # Current user info\n",
    "        self.current_user = None\n",
    "        self.current_role = None\n",
    "\n",
    "        # Initialize filter variables\n",
    "        self.game_sport_filter = None\n",
    "        self.game_date_filter = None\n",
    "        self.official_exp_filter = None\n",
    "        self.assignment_status_filter = None\n",
    "        \n",
    "        # Show login screen\n",
    "        self.show_login()\n",
    "        \n",
    "    def init_database(self):\n",
    "        \"\"\"Initialize SQLite database with all required tables\"\"\"\n",
    "        self.conn = sqlite3.connect('sports_scheduler.db')\n",
    "        self.cursor = self.conn.cursor()\n",
    "        \n",
    "        # Users table\n",
    "        self.cursor.execute('''\n",
    "            CREATE TABLE IF NOT EXISTS users (\n",
    "                id INTEGER PRIMARY KEY AUTOINCREMENT,\n",
    "                username TEXT UNIQUE NOT NULL,\n",
    "                password TEXT NOT NULL,\n",
    "                role TEXT NOT NULL,\n",
    "                full_name TEXT,\n",
    "                email TEXT,\n",
    "                phone TEXT,\n",
    "                created_date TEXT,\n",
    "                last_login TEXT\n",
    "            )\n",
    "        ''')\n",
    "        \n",
    "        # Groups table\n",
    "        self.cursor.execute('''\n",
    "            CREATE TABLE IF NOT EXISTS groups (\n",
    "                id INTEGER PRIMARY KEY AUTOINCREMENT,\n",
    "                name TEXT UNIQUE NOT NULL,\n",
    "                description TEXT,\n",
    "                created_date TEXT\n",
    "            )\n",
    "        ''')\n",
    "        \n",
    "        # User-Group relationship table\n",
    "        self.cursor.execute('''\n",
    "            CREATE TABLE IF NOT EXISTS user_groups (\n",
    "                user_id INTEGER,\n",
    "                group_id INTEGER,\n",
    "                FOREIGN KEY (user_id) REFERENCES users (id),\n",
    "                FOREIGN KEY (group_id) REFERENCES groups (id),\n",
    "                PRIMARY KEY (user_id, group_id)\n",
    "            )\n",
    "        ''')\n",
    "        \n",
    "        # Officials table\n",
    "        self.cursor.execute('''\n",
    "            CREATE TABLE IF NOT EXISTS officials (\n",
    "                id INTEGER PRIMARY KEY AUTOINCREMENT,\n",
    "                name TEXT NOT NULL,\n",
    "                email TEXT,\n",
    "                phone TEXT,\n",
    "                certifications TEXT,\n",
    "                experience_level TEXT,\n",
    "                availability TEXT,\n",
    "                created_date TEXT\n",
    "            )\n",
    "        ''')\n",
    "        \n",
    "        # Games table\n",
    "        self.cursor.execute('''\n",
    "            CREATE TABLE IF NOT EXISTS games (\n",
    "                id INTEGER PRIMARY KEY AUTOINCREMENT,\n",
    "                date TEXT NOT NULL,\n",
    "                time TEXT NOT NULL,\n",
    "                home_team TEXT NOT NULL,\n",
    "                away_team TEXT NOT NULL,\n",
    "                location TEXT NOT NULL,\n",
    "                sport TEXT NOT NULL,\n",
    "                league TEXT,\n",
    "                level TEXT,\n",
    "                officials_needed INTEGER DEFAULT 1,\n",
    "                notes TEXT,\n",
    "                created_date TEXT,\n",
    "                linked_group_id TEXT\n",
    "            )\n",
    "        ''')\n",
    "        \n",
    "        # Assignments table\n",
    "        self.cursor.execute('''\n",
    "            CREATE TABLE IF NOT EXISTS assignments (\n",
    "                id INTEGER PRIMARY KEY AUTOINCREMENT,\n",
    "                game_id INTEGER,\n",
    "                official_id INTEGER,\n",
    "                position TEXT,\n",
    "                status TEXT DEFAULT 'assigned',\n",
    "                assigned_date TEXT,\n",
    "                FOREIGN KEY (game_id) REFERENCES games (id),\n",
    "                FOREIGN KEY (official_id) REFERENCES officials (id)\n",
    "            )\n",
    "        ''')\n",
    "        \n",
    "        # Leagues table\n",
    "        self.cursor.execute('''\n",
    "            CREATE TABLE IF NOT EXISTS leagues (\n",
    "                id INTEGER PRIMARY KEY AUTOINCREMENT,\n",
    "                name TEXT UNIQUE NOT NULL,\n",
    "                sport TEXT NOT NULL,\n",
    "                description TEXT,\n",
    "                created_date TEXT\n",
    "            )\n",
    "        ''')\n",
    "        \n",
    "        # Locations table\n",
    "        self.cursor.execute('''\n",
    "            CREATE TABLE IF NOT EXISTS locations (\n",
    "                id INTEGER PRIMARY KEY AUTOINCREMENT,\n",
    "                name TEXT UNIQUE NOT NULL,\n",
    "                address TEXT,\n",
    "                city TEXT,\n",
    "                state TEXT,\n",
    "                zip_code TEXT,\n",
    "                notes TEXT,\n",
    "                created_date TEXT\n",
    "            )\n",
    "        ''')\n",
    "        \n",
    "        # Create default superadmin user if it doesn't exist\n",
    "        self.cursor.execute(\"SELECT * FROM users WHERE username = 'jose_1'\")\n",
    "        if not self.cursor.fetchone():\n",
    "            hashed_password = hashlib.sha256('Josu2398-1'.encode()).hexdigest()\n",
    "            self.cursor.execute(\"\"\"\n",
    "                INSERT INTO users (username, password, role, full_name, email, created_date)\n",
    "                VALUES (?, ?, ?, ?, ?, ?)\n",
    "            \"\"\", ('jose_1', hashed_password, 'superadmin', 'Jose (Super Administrator)', \n",
    "                  'jose@system.com', datetime.now().strftime('%Y-%m-%d %H:%M:%S')))\n",
    "        \n",
    "        # Create default admin user if it doesn't exist\n",
    "        self.cursor.execute(\"SELECT * FROM users WHERE username = 'admin'\")\n",
    "        if not self.cursor.fetchone():\n",
    "            hashed_password = hashlib.sha256('admin123'.encode()).hexdigest()\n",
    "            self.cursor.execute(\"\"\"\n",
    "                INSERT INTO users (username, password, role, full_name, email, created_date)\n",
    "                VALUES (?, ?, ?, ?, ?, ?)\n",
    "            \"\"\", ('admin', hashed_password, 'admin', 'Default Administrator', \n",
    "                  'admin@system.com', datetime.now().strftime('%Y-%m-%d %H:%M:%S')))\n",
    "    \n",
    "    def show_login(self):\n",
    "        \"\"\"Display login screen\"\"\"\n",
    "        # Clear the main window\n",
    "        for widget in self.root.winfo_children():\n",
    "            widget.destroy()\n",
    "        \n",
    "        # Create login frame\n",
    "        login_frame = tk.Frame(self.root, bg='#f0f0f0')\n",
    "        login_frame.place(relx=0.5, rely=0.5, anchor='center')\n",
    "        \n",
    "        # Title\n",
    "        title_label = tk.Label(login_frame, text=\"Sports Official Scheduler\", \n",
    "                              font=('Arial', 24, 'bold'), bg='#f0f0f0', fg='#2c3e50')\n",
    "        title_label.pack(pady=20)\n",
    "        \n",
    "        # Login form\n",
    "        tk.Label(login_frame, text=\"Username:\", font=('Arial', 12), bg='#f0f0f0').pack(pady=5)\n",
    "        self.username_entry = tk.Entry(login_frame, font=('Arial', 12), width=20)\n",
    "        self.username_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(login_frame, text=\"Password:\", font=('Arial', 12), bg='#f0f0f0').pack(pady=5)\n",
    "        self.password_entry = tk.Entry(login_frame, font=('Arial', 12), width=20, show='*')\n",
    "        self.password_entry.pack(pady=5)\n",
    "        \n",
    "        # Login button\n",
    "        login_btn = tk.Button(login_frame, text=\"Login\", font=('Arial', 12, 'bold'),\n",
    "                             bg='#3498db', fg='white', padx=20, pady=5,\n",
    "                             command=self.authenticate_user)\n",
    "        login_btn.pack(pady=20)\n",
    "        \n",
    "        # Bind Enter key to login\n",
    "        self.root.bind('<Return>', lambda event: self.authenticate_user())\n",
    "        \n",
    "        # Focus on username entry\n",
    "        self.username_entry.focus()\n",
    "    \n",
    "    def authenticate_user(self):\n",
    "        \"\"\"Authenticate user login\"\"\"\n",
    "        username = self.username_entry.get()\n",
    "        password = self.password_entry.get()\n",
    "        \n",
    "        if not username or not password:\n",
    "            messagebox.showerror(\"Error\", \"Please enter both username and password\")\n",
    "            return\n",
    "        \n",
    "        # Hash password for comparison\n",
    "        hashed_password = hashlib.sha256(password.encode()).hexdigest()\n",
    "        \n",
    "        # Check credentials\n",
    "        self.cursor.execute(\"SELECT * FROM users WHERE username = ? AND password = ?\", \n",
    "                           (username, hashed_password))\n",
    "        user = self.cursor.fetchone()\n",
    "        \n",
    "        if user:\n",
    "            self.current_user = user[1]  # username\n",
    "            self.current_role = user[3]  # role\n",
    "            \n",
    "            # Update last login\n",
    "            self.cursor.execute(\"UPDATE users SET last_login = ? WHERE username = ?\",\n",
    "                               (datetime.now().strftime('%Y-%m-%d %H:%M:%S'), username))\n",
    "            self.conn.commit()\n",
    "            \n",
    "            # Show main application\n",
    "            self.show_main_application()\n",
    "        else:\n",
    "            messagebox.showerror(\"Error\", \"Invalid username or password\")\n",
    "    \n",
    "    def show_main_application(self):\n",
    "        \"\"\"Display the main application interface\"\"\"\n",
    "        # Clear login screen\n",
    "        for widget in self.root.winfo_children():\n",
    "            widget.destroy()\n",
    "        \n",
    "        # Create menu bar\n",
    "        menubar = tk.Menu(self.root)\n",
    "        self.root.config(menu=menubar)\n",
    "        \n",
    "        # File menu\n",
    "        file_menu = tk.Menu(menubar, tearoff=0)\n",
    "        menubar.add_cascade(label=\"File\", menu=file_menu)\n",
    "        file_menu.add_command(label=\"Change Password\", command=self.change_password)\n",
    "        file_menu.add_separator()\n",
    "        file_menu.add_command(label=\"Logout\", command=self.logout)\n",
    "        file_menu.add_command(label=\"Exit\", command=self.root.quit)\n",
    "        \n",
    "        # Help menu\n",
    "        help_menu = tk.Menu(menubar, tearoff=0)\n",
    "        menubar.add_cascade(label=\"Help\", menu=help_menu)\n",
    "        help_menu.add_command(label=\"User Guide\", command=self.show_help)\n",
    "        help_menu.add_command(label=\"About\", command=self.show_about)\n",
    "        \n",
    "        # Welcome label\n",
    "        welcome_frame = tk.Frame(self.root, bg='#34495e', height=50)\n",
    "        welcome_frame.pack(fill='x')\n",
    "        welcome_frame.pack_propagate(False)\n",
    "        \n",
    "        welcome_label = tk.Label(welcome_frame, \n",
    "                                text=f\"Welcome, {self.current_user} ({self.current_role.title()})\",\n",
    "                                font=('Arial', 14, 'bold'), bg='#34495e', fg='white')\n",
    "        welcome_label.pack(side='left', padx=20, pady=15)\n",
    "        \n",
    "        # Logout button\n",
    "        logout_btn = tk.Button(welcome_frame, text=\"Logout\", font=('Arial', 10),\n",
    "                              bg='#e74c3c', fg='white', command=self.logout)\n",
    "        logout_btn.pack(side='right', padx=20, pady=10)\n",
    "        \n",
    "        # Create notebook for tabs\n",
    "        self.notebook = ttk.Notebook(self.root)\n",
    "        self.notebook.pack(fill='both', expand=True, padx=10, pady=10)\n",
    "        \n",
    "        # Create tabs based on user role\n",
    "        self.create_tabs()\n",
    "    \n",
    "    def create_tabs(self):\n",
    "        \"\"\"Create tabs based on user role\"\"\"\n",
    "        if self.current_role == 'superadmin':\n",
    "            self.create_dashboard_tab()\n",
    "            self.create_users_tab()\n",
    "            self.create_groups_tab()\n",
    "            self.create_officials_tab()\n",
    "            self.create_games_tab()\n",
    "            self.create_assignments_tab()\n",
    "            self.create_leagues_tab()\n",
    "            self.create_locations_tab()\n",
    "            self.create_reports_tab()\n",
    "        elif self.current_role == 'admin':\n",
    "            self.create_dashboard_tab()\n",
    "            self.create_officials_tab()\n",
    "            self.create_games_tab()\n",
    "            self.create_assignments_tab()\n",
    "            self.create_leagues_tab()\n",
    "            self.create_locations_tab()\n",
    "            self.create_reports_tab()\n",
    "        elif self.current_role == 'assigner':\n",
    "            self.create_games_tab()\n",
    "            self.create_assignments_tab()\n",
    "            self.create_officials_tab()\n",
    "        elif self.current_role == 'official':\n",
    "            self.create_my_profile_tab()\n",
    "            self.create_my_games_tab()\n",
    "            \n",
    "        self.add_search_filters()\n",
    "    \n",
    "    def create_dashboard_tab(self):\n",
    "        \"\"\"Create dashboard tab\"\"\"\n",
    "        dashboard_frame = ttk.Frame(self.notebook)\n",
    "        self.notebook.add(dashboard_frame, text=\"Dashboard\")\n",
    "        \n",
    "        # Dashboard content\n",
    "        title_label = tk.Label(dashboard_frame, text=\"System Dashboard\", \n",
    "                              font=('Arial', 18, 'bold'))\n",
    "        title_label.pack(pady=20)\n",
    "        \n",
    "        # Statistics frame\n",
    "        stats_frame = tk.Frame(dashboard_frame, bg='white', relief='ridge', bd=2)\n",
    "        stats_frame.pack(fill='x', padx=20, pady=10)\n",
    "        \n",
    "        # Get statistics\n",
    "        stats = self.get_dashboard_stats()\n",
    "        \n",
    "        # Create stat boxes\n",
    "        stat_items = [\n",
    "            (\"Total Games\", stats['games']),\n",
    "            (\"Total Officials\", stats['officials']),\n",
    "            (\"Active Assignments\", stats['assignments']),\n",
    "            (\"Total Users\", stats['users'])\n",
    "        ]\n",
    "        \n",
    "        for i, (label, value) in enumerate(stat_items):\n",
    "            stat_box = tk.Frame(stats_frame, bg='#3498db', width=150, height=80)\n",
    "            stat_box.pack(side='left', padx=20, pady=20, fill='both', expand=True)\n",
    "            stat_box.pack_propagate(False)\n",
    "            \n",
    "            tk.Label(stat_box, text=str(value), font=('Arial', 24, 'bold'),\n",
    "                    bg='#3498db', fg='white').pack(expand=True)\n",
    "            tk.Label(stat_box, text=label, font=('Arial', 10),\n",
    "                    bg='#3498db', fg='white').pack()\n",
    "        \n",
    "        # Recent activity\n",
    "        activity_label = tk.Label(dashboard_frame, text=\"Recent Activity\", \n",
    "                                 font=('Arial', 14, 'bold'))\n",
    "        activity_label.pack(pady=(20, 10))\n",
    "        \n",
    "        activity_frame = tk.Frame(dashboard_frame, bg='white', relief='ridge', bd=1)\n",
    "        activity_frame.pack(fill='both', expand=True, padx=20, pady=10)\n",
    "        \n",
    "        # Activity list\n",
    "        activity_list = tk.Listbox(activity_frame, font=('Arial', 10))\n",
    "        activity_list.pack(fill='both', expand=True, padx=10, pady=10)\n",
    "        \n",
    "        # Add recent activities\n",
    "        recent_activities = self.get_recent_activities()\n",
    "        for activity in recent_activities:\n",
    "            activity_list.insert(tk.END, activity)\n",
    "    \n",
    "    def get_dashboard_stats(self):\n",
    "        \"\"\"Get dashboard statistics\"\"\"\n",
    "        stats = {}\n",
    "        \n",
    "        # Count games\n",
    "        self.cursor.execute(\"SELECT COUNT(*) FROM games\")\n",
    "        stats['games'] = self.cursor.fetchone()[0]\n",
    "        \n",
    "        # Count officials\n",
    "        self.cursor.execute(\"SELECT COUNT(*) FROM officials\")\n",
    "        stats['officials'] = self.cursor.fetchone()[0]\n",
    "        \n",
    "        # Count assignments\n",
    "        self.cursor.execute(\"SELECT COUNT(*) FROM assignments\")\n",
    "        stats['assignments'] = self.cursor.fetchone()[0]\n",
    "        \n",
    "        # Count users\n",
    "        self.cursor.execute(\"SELECT COUNT(*) FROM users\")\n",
    "        stats['users'] = self.cursor.fetchone()[0]\n",
    "        \n",
    "        return stats\n",
    "    \n",
    "    def get_recent_activities(self):\n",
    "        \"\"\"Get recent system activities\"\"\"\n",
    "        activities = []\n",
    "        \n",
    "        # Recent games\n",
    "        self.cursor.execute(\"\"\"\n",
    "            SELECT date, time, home_team, away_team \n",
    "            FROM games \n",
    "            ORDER BY created_date DESC \n",
    "            LIMIT 5\n",
    "        \"\"\")\n",
    "        games = self.cursor.fetchall()\n",
    "        for game in games:\n",
    "            activities.append(f\"Game: {game[2]} vs {game[3]} on {game[0]} at {game[1]}\")\n",
    "        \n",
    "        # Recent assignments\n",
    "        self.cursor.execute(\"\"\"\n",
    "            SELECT o.name, g.home_team, g.away_team, a.assigned_date\n",
    "            FROM assignments a\n",
    "            JOIN officials o ON a.official_id = o.id\n",
    "            JOIN games g ON a.game_id = g.id\n",
    "            ORDER BY a.assigned_date DESC\n",
    "            LIMIT 5\n",
    "        \"\"\")\n",
    "        assignments = self.cursor.fetchall()\n",
    "        for assignment in assignments:\n",
    "            activities.append(f\"Assigned: {assignment[0]} to {assignment[1]} vs {assignment[2]}\")\n",
    "        \n",
    "        return activities[:10]  # Return top 10 activities\n",
    "    \n",
    "    def create_users_tab(self):\n",
    "        \"\"\"Create users management tab\"\"\"\n",
    "        users_frame = ttk.Frame(self.notebook)\n",
    "        self.notebook.add(users_frame, text=\"Users\")\n",
    "        \n",
    "        # Control frame\n",
    "        control_frame = tk.Frame(users_frame)\n",
    "        control_frame.pack(fill='x', padx=10, pady=5)\n",
    "        \n",
    "        # Buttons\n",
    "        tk.Button(control_frame, text=\"Add User\", command=self.add_user,\n",
    "                 bg='#27ae60', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Edit User\", command=self.edit_user,\n",
    "                 bg='#f39c12', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Delete User\", command=self.delete_user,\n",
    "                 bg='#e74c3c', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Reset Password\", command=self.reset_user_password,\n",
    "                 bg='#9b59b6', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Refresh\", command=self.refresh_users,\n",
    "                 bg='#34495e', fg='white', font=('Arial', 10, 'bold')).pack(side='right', padx=5)\n",
    "        \n",
    "        # Users treeview\n",
    "        columns = ('ID', 'Username', 'Role', 'Full Name', 'Email', 'Phone', 'Created', 'Last Login')\n",
    "        self.users_tree = ttk.Treeview(users_frame, columns=columns, show='headings', height=20)\n",
    "        \n",
    "        # Configure columns\n",
    "        for col in columns:\n",
    "            self.users_tree.heading(col, text=col)\n",
    "            if col == 'ID':\n",
    "                self.users_tree.column(col, width=50)\n",
    "            elif col in ['Username', 'Role']:\n",
    "                self.users_tree.column(col, width=100)\n",
    "            elif col in ['Created', 'Last Login']:\n",
    "                self.users_tree.column(col, width=120)\n",
    "            else:\n",
    "                self.users_tree.column(col, width=150)\n",
    "        \n",
    "        # Scrollbars\n",
    "        v_scrollbar = ttk.Scrollbar(users_frame, orient='vertical', command=self.users_tree.yview)\n",
    "        h_scrollbar = ttk.Scrollbar(users_frame, orient='horizontal', command=self.users_tree.xview)\n",
    "        self.users_tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)\n",
    "        \n",
    "        # Pack treeview and scrollbars\n",
    "        self.users_tree.pack(side='left', fill='both', expand=True, padx=(10, 0), pady=5)\n",
    "        v_scrollbar.pack(side='right', fill='y', padx=(0, 10), pady=5)\n",
    "        h_scrollbar.pack(side='bottom', fill='x', padx=10, pady=(0, 5))\n",
    "        \n",
    "        # Load users data\n",
    "        self.refresh_users()\n",
    "    \n",
    "    def refresh_users(self):\n",
    "        \"\"\"Refresh users treeview\"\"\"\n",
    "        # Clear existing items\n",
    "        for item in self.users_tree.get_children():\n",
    "            self.users_tree.delete(item)\n",
    "        \n",
    "        # Fetch users from database\n",
    "        self.cursor.execute(\"SELECT * FROM users ORDER BY id\")\n",
    "        users = self.cursor.fetchall()\n",
    "        \n",
    "        # Insert users into treeview\n",
    "        for user in users:\n",
    "            self.users_tree.insert('', 'end', values=user)\n",
    "    \n",
    "    def add_user(self):\n",
    "        \"\"\"Add new user\"\"\"\n",
    "        self.user_form_window(mode='add')\n",
    "    \n",
    "    def edit_user(self):\n",
    "        \"\"\"Edit selected user\"\"\"\n",
    "        selection = self.users_tree.selection()\n",
    "        if not selection:\n",
    "            messagebox.showwarning(\"Warning\", \"Please select a user to edit\")\n",
    "            return\n",
    "        \n",
    "        item = self.users_tree.item(selection[0])\n",
    "        user_data = item['values']\n",
    "        self.user_form_window(mode='edit', user_data=user_data)\n",
    "    \n",
    "    def delete_user(self):\n",
    "        \"\"\"Delete selected user\"\"\"\n",
    "        selection = self.users_tree.selection()\n",
    "        if not selection:\n",
    "            messagebox.showwarning(\"Warning\", \"Please select a user to delete\")\n",
    "            return\n",
    "        \n",
    "        item = self.users_tree.item(selection[0])\n",
    "        user_data = item['values']\n",
    "        username = user_data[1]\n",
    "        \n",
    "        if username == 'jose_1':\n",
    "            messagebox.showerror(\"Error\", \"Cannot delete superadmin user\")\n",
    "            return\n",
    "        \n",
    "        if messagebox.askyesno(\"Confirm Delete\", f\"Are you sure you want to delete user '{username}'?\"):\n",
    "            try:\n",
    "                self.cursor.execute(\"DELETE FROM users WHERE id = ?\", (user_data[0],))\n",
    "                self.conn.commit()\n",
    "                messagebox.showinfo(\"Success\", \"User deleted successfully\")\n",
    "                self.refresh_users()\n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Error\", f\"Failed to delete user: {str(e)}\")\n",
    "    \n",
    "    def reset_user_password(self):\n",
    "        \"\"\"Reset user password\"\"\"\n",
    "        selection = self.users_tree.selection()\n",
    "        if not selection:\n",
    "            messagebox.showwarning(\"Warning\", \"Please select a user to reset password\")\n",
    "            return\n",
    "    \n",
    "        item = self.users_tree.item(selection[0])\n",
    "        user_data = item['values']\n",
    "        username = user_data[1]\n",
    "    \n",
    "        # Password reset dialog\n",
    "        reset_window = tk.Toplevel(self.root)\n",
    "        reset_window.title(f\"Reset Password - {username}\")\n",
    "        reset_window.geometry(\"400x280\")  # Made taller to accommodate buttons\n",
    "        reset_window.resizable(True, True)  # Allow resizing\n",
    "        reset_window.grab_set()  # Make window modal\n",
    "    \n",
    "        # Center the window\n",
    "        reset_window.transient(self.root)\n",
    "        reset_window.geometry(\"+%d+%d\" % (self.root.winfo_rootx() + 50, self.root.winfo_rooty() + 50))\n",
    "    \n",
    "        tk.Label(reset_window, text=f\"Reset password for: {username}\", \n",
    "                font=('Arial', 12, 'bold')).pack(pady=15)\n",
    "    \n",
    "        tk.Label(reset_window, text=\"New Password:\", font=('Arial', 10)).pack(pady=5)\n",
    "        new_password_entry = tk.Entry(reset_window, show='*', width=30, font=('Arial', 10))\n",
    "        new_password_entry.pack(pady=5)\n",
    "    \n",
    "        tk.Label(reset_window, text=\"Confirm Password:\", font=('Arial', 10)).pack(pady=5)\n",
    "        confirm_password_entry = tk.Entry(reset_window, show='*', width=30, font=('Arial', 10))\n",
    "        confirm_password_entry.pack(pady=5)\n",
    "    \n",
    "        def execute_reset():\n",
    "            new_password = new_password_entry.get()\n",
    "            confirm_password = confirm_password_entry.get()\n",
    "    \n",
    "            if not new_password:\n",
    "                messagebox.showerror(\"Error\", \"Please enter a new password\")\n",
    "                return\n",
    "    \n",
    "            if new_password != confirm_password:\n",
    "                messagebox.showerror(\"Error\", \"Passwords do not match\")\n",
    "                return\n",
    "    \n",
    "            if len(new_password) < 6:\n",
    "                messagebox.showerror(\"Error\", \"Password must be at least 6 characters long\")\n",
    "                return\n",
    "    \n",
    "            try:\n",
    "                hashed_password = hashlib.sha256(new_password.encode()).hexdigest()\n",
    "                self.cursor.execute(\"UPDATE users SET password = ? WHERE id = ?\", \n",
    "                                   (hashed_password, user_data[0]))\n",
    "                self.conn.commit()\n",
    "                messagebox.showinfo(\"Success\", f\"Password reset successfully for {username}\")\n",
    "                reset_window.destroy()\n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Error\", f\"Failed to reset password: {str(e)}\")\n",
    "    \n",
    "        # Add some spacing before buttons\n",
    "        tk.Label(reset_window, text=\"\", height=1).pack()  # Spacer\n",
    "    \n",
    "        # Buttons frame\n",
    "        button_frame = tk.Frame(reset_window)\n",
    "        button_frame.pack(pady=20)\n",
    "    \n",
    "        # Reset Password button\n",
    "        reset_btn = tk.Button(button_frame, text=\"Reset Password\", command=execute_reset,\n",
    "                             bg='#e74c3c', fg='white', font=('Arial', 11, 'bold'),\n",
    "                             width=15, height=1)\n",
    "        reset_btn.pack(side='left', padx=10)\n",
    "        \n",
    "        # Cancel button\n",
    "        cancel_btn = tk.Button(button_frame, text=\"Cancel\", command=reset_window.destroy,\n",
    "                              bg='#95a5a6', fg='white', font=('Arial', 11, 'bold'),\n",
    "                              width=10, height=1)\n",
    "        cancel_btn.pack(side='left', padx=10)\n",
    "        \n",
    "        # Focus on password entry and bind Enter key\n",
    "        new_password_entry.focus()\n",
    "        reset_window.bind('<Return>', lambda event: execute_reset())\n",
    "        \n",
    "        # Bind Escape key to cancel\n",
    "        reset_window.bind('<Escape>', lambda event: reset_window.destroy())\n",
    "    \n",
    "    def user_form_window(self, mode='add', user_data=None):\n",
    "        \"\"\"User form window for add/edit\"\"\"\n",
    "        form_window = tk.Toplevel(self.root)\n",
    "        form_window.title(f\"{mode.title()} User\")\n",
    "        form_window.geometry(\"400x500\")\n",
    "        form_window.resizable(False, False)\n",
    "        \n",
    "        # Form fields\n",
    "        tk.Label(form_window, text=\"Username:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        username_entry = tk.Entry(form_window, width=40)\n",
    "        username_entry.pack(pady=5)\n",
    "        \n",
    "        if mode == 'add':\n",
    "            tk.Label(form_window, text=\"Password:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "            password_entry = tk.Entry(form_window, width=40, show='*')\n",
    "            password_entry.pack(pady=5)\n",
    "            \n",
    "            tk.Label(form_window, text=\"Confirm Password:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "            confirm_entry = tk.Entry(form_window, width=40, show='*')\n",
    "            confirm_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(form_window, text=\"Role:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        role_var = tk.StringVar()\n",
    "        role_combo = ttk.Combobox(form_window, textvariable=role_var, width=37,\n",
    "                                 values=['admin', 'assigner', 'official'], state='readonly')\n",
    "        role_combo.pack(pady=5)\n",
    "        \n",
    "        tk.Label(form_window, text=\"Full Name:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        fullname_entry = tk.Entry(form_window, width=40)\n",
    "        fullname_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(form_window, text=\"Email:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        email_entry = tk.Entry(form_window, width=40)\n",
    "        email_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(form_window, text=\"Phone:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        phone_entry = tk.Entry(form_window, width=40)\n",
    "        phone_entry.pack(pady=5)\n",
    "        \n",
    "        # Fill form if editing\n",
    "        if mode == 'edit' and user_data:\n",
    "            username_entry.insert(0, user_data[1])\n",
    "            role_var.set(user_data[3])\n",
    "            fullname_entry.insert(0, user_data[4] or '')\n",
    "            email_entry.insert(0, user_data[5] or '')\n",
    "            phone_entry.insert(0, user_data[6] or '')\n",
    "        \n",
    "        def save_user():\n",
    "            username = username_entry.get().strip()\n",
    "            role = role_var.get()\n",
    "            fullname = fullname_entry.get().strip()\n",
    "            email = email_entry.get().strip()\n",
    "            phone = phone_entry.get().strip()\n",
    "            \n",
    "            if not username or not role:\n",
    "                messagebox.showerror(\"Error\", \"Username and role are required\")\n",
    "                return\n",
    "            \n",
    "            if mode == 'add':\n",
    "                password = password_entry.get()\n",
    "                confirm = confirm_entry.get()\n",
    "                \n",
    "                if not password:\n",
    "                    messagebox.showerror(\"Error\", \"Password is required\")\n",
    "                    return\n",
    "                \n",
    "                if password != confirm:\n",
    "                    messagebox.showerror(\"Error\", \"Passwords do not match\")\n",
    "                    return\n",
    "                \n",
    "                if len(password) < 6:\n",
    "                    messagebox.showerror(\"Error\", \"Password must be at least 6 characters long\")\n",
    "                    return\n",
    "                \n",
    "                # Check if username already exists\n",
    "                self.cursor.execute(\"SELECT id FROM users WHERE username = ?\", (username,))\n",
    "                if self.cursor.fetchone():\n",
    "                    messagebox.showerror(\"Error\", \"Username already exists\")\n",
    "                    return\n",
    "                \n",
    "                try:\n",
    "                    hashed_password = hashlib.sha256(password.encode()).hexdigest()\n",
    "                    self.cursor.execute(\"\"\"\n",
    "                        INSERT INTO users (username, password, role, full_name, email, phone, created_date)\n",
    "                        VALUES (?, ?, ?, ?, ?, ?, ?)\n",
    "                    \"\"\", (username, hashed_password, role, fullname, email, phone,\n",
    "                          datetime.now().strftime('%Y-%m-%d %H:%M:%S')))\n",
    "                    self.conn.commit()\n",
    "                    messagebox.showinfo(\"Success\", \"User added successfully\")\n",
    "                    form_window.destroy()\n",
    "                    self.refresh_users()\n",
    "                except sqlite3.Error as e:\n",
    "                    messagebox.showerror(\"Error\", f\"Failed to add user: {str(e)}\")\n",
    "            \n",
    "            else:  # edit mode\n",
    "                try:\n",
    "                    self.cursor.execute(\"\"\"\n",
    "                        UPDATE users SET username = ?, role = ?, full_name = ?, \n",
    "                        email = ?, phone = ? WHERE id = ?\n",
    "                    \"\"\", (username, role, fullname, email, phone, user_data[0]))\n",
    "                    self.conn.commit()\n",
    "                    messagebox.showinfo(\"Success\", \"User updated successfully\")\n",
    "                    form_window.destroy()\n",
    "                    self.refresh_users()\n",
    "                except sqlite3.Error as e:\n",
    "                    messagebox.showerror(\"Error\", f\"Failed to update user: {str(e)}\")\n",
    "        \n",
    "        tk.Button(form_window, text=f\"{mode.title()} User\", command=save_user,\n",
    "                 bg='#27ae60', fg='white', font=('Arial', 12, 'bold')).pack(pady=20)\n",
    "    \n",
    "    def create_groups_tab(self):\n",
    "        \"\"\"Create groups management tab\"\"\"\n",
    "        groups_frame = ttk.Frame(self.notebook)\n",
    "        self.notebook.add(groups_frame, text=\"Groups\")\n",
    "        \n",
    "        # Control frame\n",
    "        control_frame = tk.Frame(groups_frame)\n",
    "        control_frame.pack(fill='x', padx=10, pady=5)\n",
    "        \n",
    "        # Buttons\n",
    "        tk.Button(control_frame, text=\"Add Group\", command=self.add_group,\n",
    "                 bg='#27ae60', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Edit Group\", command=self.edit_group,\n",
    "                 bg='#f39c12', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Delete Group\", command=self.delete_group,\n",
    "                 bg='#e74c3c', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Manage Members\", command=self.manage_group_members,\n",
    "                 bg='#9b59b6', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Refresh\", command=self.refresh_groups,\n",
    "                 bg='#34495e', fg='white', font=('Arial', 10, 'bold')).pack(side='right', padx=5)\n",
    "        \n",
    "        # Groups treeview\n",
    "        columns = ('ID', 'Name', 'Description', 'Created Date', 'Members')\n",
    "        self.groups_tree = ttk.Treeview(groups_frame, columns=columns, show='headings', height=20)\n",
    "        \n",
    "        for col in columns:\n",
    "            self.groups_tree.heading(col, text=col)\n",
    "            if col == 'ID':\n",
    "                self.groups_tree.column(col, width=50)\n",
    "            elif col == 'Members':\n",
    "                self.groups_tree.column(col, width=80)\n",
    "            else:\n",
    "                self.groups_tree.column(col, width=200)\n",
    "        \n",
    "        # Scrollbars\n",
    "        v_scrollbar = ttk.Scrollbar(groups_frame, orient='vertical', command=self.groups_tree.yview)\n",
    "        self.groups_tree.configure(yscrollcommand=v_scrollbar.set)\n",
    "        \n",
    "        self.groups_tree.pack(side='left', fill='both', expand=True, padx=(10, 0), pady=5)\n",
    "        v_scrollbar.pack(side='right', fill='y', padx=(0, 10), pady=5)\n",
    "        \n",
    "        self.refresh_groups()\n",
    "    \n",
    "    def refresh_groups(self):\n",
    "        \"\"\"Refresh groups treeview\"\"\"\n",
    "        for item in self.groups_tree.get_children():\n",
    "            self.groups_tree.delete(item)\n",
    "        \n",
    "        self.cursor.execute(\"SELECT * FROM groups ORDER BY name\")\n",
    "        groups = self.cursor.fetchall()\n",
    "        \n",
    "        for group in groups:\n",
    "            # Count members\n",
    "            self.cursor.execute(\"SELECT COUNT(*) FROM user_groups WHERE group_id = ?\", (group[0],))\n",
    "            member_count = self.cursor.fetchone()[0]\n",
    "            \n",
    "            # Insert with member count\n",
    "            self.groups_tree.insert('', 'end', values=(*group, member_count))\n",
    "    \n",
    "    def add_group(self):\n",
    "        \"\"\"Add new group\"\"\"\n",
    "        self.group_form_window(mode='add')\n",
    "    \n",
    "    def edit_group(self):\n",
    "        \"\"\"Edit selected group\"\"\"\n",
    "        selection = self.groups_tree.selection()\n",
    "        if not selection:\n",
    "            messagebox.showwarning(\"Warning\", \"Please select a group to edit\")\n",
    "            return\n",
    "        \n",
    "        item = self.groups_tree.item(selection[0])\n",
    "        group_data = item['values']\n",
    "        self.group_form_window(mode='edit', group_data=group_data)\n",
    "    \n",
    "    def delete_group(self):\n",
    "        \"\"\"Delete selected group\"\"\"\n",
    "        selection = self.groups_tree.selection()\n",
    "        if not selection:\n",
    "            messagebox.showwarning(\"Warning\", \"Please select a group to delete\")\n",
    "            return\n",
    "        \n",
    "        item = self.groups_tree.item(selection[0])\n",
    "        group_data = item['values']\n",
    "        \n",
    "        if messagebox.askyesno(\"Confirm Delete\", f\"Are you sure you want to delete group '{group_data[1]}'?\"):\n",
    "            try:\n",
    "                # Delete group members first\n",
    "                self.cursor.execute(\"DELETE FROM user_groups WHERE group_id = ?\", (group_data[0],))\n",
    "                # Delete group\n",
    "                self.cursor.execute(\"DELETE FROM groups WHERE id = ?\", (group_data[0],))\n",
    "                self.conn.commit()\n",
    "                messagebox.showinfo(\"Success\", \"Group deleted successfully\")\n",
    "                self.refresh_groups()\n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Error\", f\"Failed to delete group: {str(e)}\")\n",
    "    \n",
    "    def group_form_window(self, mode='add', group_data=None):\n",
    "        \"\"\"Group form window\"\"\"\n",
    "        form_window = tk.Toplevel(self.root)\n",
    "        form_window.title(f\"{mode.title()} Group\")\n",
    "        form_window.geometry(\"400x300\")\n",
    "        form_window.resizable(False, False)\n",
    "        \n",
    "        tk.Label(form_window, text=\"Group Name:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        name_entry = tk.Entry(form_window, width=40)\n",
    "        name_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(form_window, text=\"Description:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        desc_text = tk.Text(form_window, width=40, height=8)\n",
    "        desc_text.pack(pady=5)\n",
    "        \n",
    "        if mode == 'edit' and group_data:\n",
    "            name_entry.insert(0, group_data[1])\n",
    "            desc_text.insert('1.0', group_data[2] or '')\n",
    "        \n",
    "        def save_group():\n",
    "            name = name_entry.get().strip()\n",
    "            description = desc_text.get('1.0', tk.END).strip()\n",
    "            \n",
    "            if not name:\n",
    "                messagebox.showerror(\"Error\", \"Group name is required\")\n",
    "                return\n",
    "            \n",
    "            try:\n",
    "                if mode == 'add':\n",
    "                    self.cursor.execute(\"\"\"\n",
    "                        INSERT INTO groups (name, description, created_date)\n",
    "                        VALUES (?, ?, ?)\n",
    "                    \"\"\", (name, description, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))\n",
    "                else:\n",
    "                    self.cursor.execute(\"\"\"\n",
    "                        UPDATE groups SET name = ?, description = ? WHERE id = ?\n",
    "                    \"\"\", (name, description, group_data[0]))\n",
    "                \n",
    "                self.conn.commit()\n",
    "                messagebox.showinfo(\"Success\", f\"Group {mode}ed successfully\")\n",
    "                form_window.destroy()\n",
    "                self.refresh_groups()\n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Error\", f\"Failed to {mode} group: {str(e)}\")\n",
    "        \n",
    "        tk.Button(form_window, text=f\"{mode.title()} Group\", command=save_group,\n",
    "                 bg='#27ae60', fg='white', font=('Arial', 12, 'bold')).pack(pady=20)\n",
    "    \n",
    "    def manage_group_members(self):\n",
    "        \"\"\"Manage group members\"\"\"\n",
    "        selection = self.groups_tree.selection()\n",
    "        if not selection:\n",
    "            messagebox.showwarning(\"Warning\", \"Please select a group to manage members\")\n",
    "            return\n",
    "        \n",
    "        item = self.groups_tree.item(selection[0])\n",
    "        group_data = item['values']\n",
    "        group_id = group_data[0]\n",
    "        group_name = group_data[1]\n",
    "        \n",
    "        # Create members management window\n",
    "        members_window = tk.Toplevel(self.root)\n",
    "        members_window.title(f\"Manage Members - {group_name}\")\n",
    "        members_window.geometry(\"800x600\")\n",
    "        \n",
    "        # Current members frame\n",
    "        current_frame = tk.LabelFrame(members_window, text=\"Current Members\", font=('Arial', 12, 'bold'))\n",
    "        current_frame.pack(fill='both', expand=True, padx=10, pady=5)\n",
    "        \n",
    "        current_listbox = tk.Listbox(current_frame)\n",
    "        current_listbox.pack(fill='both', expand=True, padx=5, pady=5)\n",
    "        \n",
    "        # Available users frame\n",
    "        available_frame = tk.LabelFrame(members_window, text=\"Available Users\", font=('Arial', 12, 'bold'))\n",
    "        available_frame.pack(fill='both', expand=True, padx=10, pady=5)\n",
    "        \n",
    "        available_listbox = tk.Listbox(available_frame)\n",
    "        available_listbox.pack(fill='both', expand=True, padx=5, pady=5)\n",
    "        \n",
    "        # Buttons frame\n",
    "        buttons_frame = tk.Frame(members_window)\n",
    "        buttons_frame.pack(fill='x', padx=10, pady=5)\n",
    "        \n",
    "        def refresh_member_lists():\n",
    "            # Clear lists\n",
    "            current_listbox.delete(0, tk.END)\n",
    "            available_listbox.delete(0, tk.END)\n",
    "            \n",
    "            # Get current members\n",
    "            self.cursor.execute(\"\"\"\n",
    "                SELECT u.id, u.username, u.full_name\n",
    "                FROM users u\n",
    "                JOIN user_groups ug ON u.id = ug.user_id\n",
    "                WHERE ug.group_id = ?\n",
    "            \"\"\", (group_id,))\n",
    "            current_members = self.cursor.fetchall()\n",
    "            \n",
    "            for member in current_members:\n",
    "                current_listbox.insert(tk.END, f\"{member[1]} - {member[2] or 'No name'}\")\n",
    "                current_listbox.insert(tk.END, member[0])  # Store ID for reference\n",
    "            \n",
    "            # Get available users (not in this group)\n",
    "            self.cursor.execute(\"\"\"\n",
    "                SELECT u.id, u.username, u.full_name\n",
    "                FROM users u\n",
    "                WHERE u.id NOT IN (\n",
    "                    SELECT ug.user_id FROM user_groups ug WHERE ug.group_id = ?\n",
    "                )\n",
    "            \"\"\", (group_id,))\n",
    "            available_users = self.cursor.fetchall()\n",
    "            \n",
    "            for user in available_users:\n",
    "                available_listbox.insert(tk.END, f\"{user[1]} - {user[2] or 'No name'}\")\n",
    "                available_listbox.insert(tk.END, user[0])  # Store ID for reference\n",
    "        \n",
    "        def add_member():\n",
    "            selection = available_listbox.curselection()\n",
    "            if not selection:\n",
    "                messagebox.showwarning(\"Warning\", \"Please select a user to add\")\n",
    "                return\n",
    "            \n",
    "            selected_index = selection[0]\n",
    "            if selected_index % 2 == 1:  # Skip ID entries\n",
    "                selected_index -= 1\n",
    "            \n",
    "            user_id = available_listbox.get(selected_index + 1)\n",
    "            \n",
    "            try:\n",
    "                self.cursor.execute(\"INSERT INTO user_groups (user_id, group_id) VALUES (?, ?)\",\n",
    "                                   (user_id, group_id))\n",
    "                self.conn.commit()\n",
    "                refresh_member_lists()\n",
    "                self.refresh_groups()\n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Error\", f\"Failed to add member: {str(e)}\")\n",
    "        \n",
    "        def remove_member():\n",
    "            selection = current_listbox.curselection()\n",
    "            if not selection:\n",
    "                messagebox.showwarning(\"Warning\", \"Please select a member to remove\")\n",
    "                return\n",
    "            \n",
    "            selected_index = selection[0]\n",
    "            if selected_index % 2 == 1:  # Skip ID entries\n",
    "                selected_index -= 1\n",
    "            \n",
    "            user_id = current_listbox.get(selected_index + 1)\n",
    "            \n",
    "            try:\n",
    "                self.cursor.execute(\"DELETE FROM user_groups WHERE user_id = ? AND group_id = ?\",\n",
    "                                   (user_id, group_id))\n",
    "                self.conn.commit()\n",
    "                refresh_member_lists()\n",
    "                self.refresh_groups()\n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Error\", f\"Failed to remove member: {str(e)}\")\n",
    "        \n",
    "        tk.Button(buttons_frame, text=\"Add Member\", command=add_member,\n",
    "                 bg='#27ae60', fg='white').pack(side='left', padx=5)\n",
    "        tk.Button(buttons_frame, text=\"Remove Member\", command=remove_member,\n",
    "                 bg='#e74c3c', fg='white').pack(side='left', padx=5)\n",
    "        tk.Button(buttons_frame, text=\"Refresh\", command=refresh_member_lists,\n",
    "                 bg='#34495e', fg='white').pack(side='right', padx=5)\n",
    "        \n",
    "        # Initial load\n",
    "        refresh_member_lists()\n",
    "    \n",
    "    def create_officials_tab(self):\n",
    "        \"\"\"Create officials management tab\"\"\"\n",
    "        officials_frame = ttk.Frame(self.notebook)\n",
    "        self.notebook.add(officials_frame, text=\"Officials\")\n",
    "        \n",
    "        # Control frame\n",
    "        control_frame = tk.Frame(officials_frame)\n",
    "        control_frame.pack(fill='x', padx=10, pady=5)\n",
    "        \n",
    "        # Buttons\n",
    "        tk.Button(control_frame, text=\"Add Official\", command=self.add_official,\n",
    "                 bg='#27ae60', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Edit Official\", command=self.edit_official,\n",
    "                 bg='#f39c12', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Delete Official\", command=self.delete_official,\n",
    "                 bg='#e74c3c', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Download Template\", command=self.generate_officials_template,\n",
    "                 bg='#8e44ad', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Import CSV\", command=self.import_officials_csv,\n",
    "                 bg='#9b59b6', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Export CSV\", command=self.export_officials_csv,\n",
    "                 bg='#16a085', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Refresh\", command=self.refresh_officials,\n",
    "                 bg='#34495e', fg='white', font=('Arial', 10, 'bold')).pack(side='right', padx=5)\n",
    "        \n",
    "        # Officials treeview\n",
    "        columns = ('ID', 'Name', 'Email', 'Phone', 'Certifications', 'Experience', 'Availability')\n",
    "        self.officials_tree = ttk.Treeview(officials_frame, columns=columns, show='headings', height=20)\n",
    "        \n",
    "        for col in columns:\n",
    "            self.officials_tree.heading(col, text=col)\n",
    "            if col == 'ID':\n",
    "                self.officials_tree.column(col, width=50)\n",
    "            elif col in ['Phone', 'Experience']:\n",
    "                self.officials_tree.column(col, width=100)\n",
    "            else:\n",
    "                self.officials_tree.column(col, width=150)\n",
    "        \n",
    "        # Scrollbars\n",
    "        v_scrollbar = ttk.Scrollbar(officials_frame, orient='vertical', command=self.officials_tree.yview)\n",
    "        h_scrollbar = ttk.Scrollbar(officials_frame, orient='horizontal', command=self.officials_tree.xview)\n",
    "        self.officials_tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)\n",
    "        \n",
    "        self.officials_tree.pack(side='left', fill='both', expand=True, padx=(10, 0), pady=5)\n",
    "        v_scrollbar.pack(side='right', fill='y', padx=(0, 10), pady=5)\n",
    "        \n",
    "        self.refresh_officials()\n",
    "    \n",
    "    def refresh_officials(self):\n",
    "        \"\"\"Refresh officials treeview\"\"\"\n",
    "        for item in self.officials_tree.get_children():\n",
    "            self.officials_tree.delete(item)\n",
    "        \n",
    "        self.cursor.execute(\"SELECT * FROM officials ORDER BY name\")\n",
    "        officials = self.cursor.fetchall()\n",
    "        \n",
    "        for official in officials:\n",
    "            self.officials_tree.insert('', 'end', values=official)\n",
    "    \n",
    "    def add_official(self):\n",
    "        \"\"\"Add new official\"\"\"\n",
    "        self.official_form_window(mode='add')\n",
    "    \n",
    "    def edit_official(self):\n",
    "        \"\"\"Edit selected official\"\"\"\n",
    "        selection = self.officials_tree.selection()\n",
    "        if not selection:\n",
    "            messagebox.showwarning(\"Warning\", \"Please select an official to edit\")\n",
    "            return\n",
    "        \n",
    "        item = self.officials_tree.item(selection[0])\n",
    "        official_data = item['values']\n",
    "        self.official_form_window(mode='edit', official_data=official_data)\n",
    "    \n",
    "    def delete_official(self):\n",
    "        \"\"\"Delete selected official\"\"\"\n",
    "        selection = self.officials_tree.selection()\n",
    "        if not selection:\n",
    "            messagebox.showwarning(\"Warning\", \"Please select an official to delete\")\n",
    "            return\n",
    "        \n",
    "        item = self.officials_tree.item(selection[0])\n",
    "        official_data = item['values']\n",
    "        \n",
    "        if messagebox.askyesno(\"Confirm Delete\", f\"Are you sure you want to delete official '{official_data[1]}'?\"):\n",
    "            try:\n",
    "                # Delete assignments first\n",
    "                self.cursor.execute(\"DELETE FROM assignments WHERE official_id = ?\", (official_data[0],))\n",
    "                # Delete official\n",
    "                self.cursor.execute(\"DELETE FROM officials WHERE id = ?\", (official_data[0],))\n",
    "                self.conn.commit()\n",
    "                messagebox.showinfo(\"Success\", \"Official deleted successfully\")\n",
    "                self.refresh_officials()\n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Error\", f\"Failed to delete official: {str(e)}\")\n",
    "    \n",
    "    def official_form_window(self, mode='add', official_data=None):\n",
    "        \"\"\"Official form window\"\"\"\n",
    "        form_window = tk.Toplevel(self.root)\n",
    "        form_window.title(f\"{mode.title()} Official\")\n",
    "        form_window.geometry(\"450x600\")\n",
    "        form_window.resizable(False, False)\n",
    "        \n",
    "        # Create scrollable frame\n",
    "        canvas = tk.Canvas(form_window)\n",
    "        scrollbar = ttk.Scrollbar(form_window, orient=\"vertical\", command=canvas.yview)\n",
    "        scrollable_frame = ttk.Frame(canvas)\n",
    "        \n",
    "        scrollable_frame.bind(\n",
    "            \"<Configure>\",\n",
    "            lambda e: canvas.configure(scrollregion=canvas.bbox(\"all\"))\n",
    "        )\n",
    "        \n",
    "        canvas.create_window((0, 0), window=scrollable_frame, anchor=\"nw\")\n",
    "        canvas.configure(yscrollcommand=scrollbar.set)\n",
    "        \n",
    "        # Form fields\n",
    "        tk.Label(scrollable_frame, text=\"Name:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        name_entry = tk.Entry(scrollable_frame, width=40)\n",
    "        name_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(scrollable_frame, text=\"Email:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        email_entry = tk.Entry(scrollable_frame, width=40)\n",
    "        email_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(scrollable_frame, text=\"Phone:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        phone_entry = tk.Entry(scrollable_frame, width=40)\n",
    "        phone_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(scrollable_frame, text=\"Certifications:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        cert_text = tk.Text(scrollable_frame, width=40, height=4)\n",
    "        cert_text.pack(pady=5)\n",
    "        \n",
    "        tk.Label(scrollable_frame, text=\"Experience Level:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        exp_var = tk.StringVar()\n",
    "        exp_combo = ttk.Combobox(scrollable_frame, textvariable=exp_var, width=37,\n",
    "                                values=['Beginner', 'Intermediate', 'Advanced', 'Expert'], state='readonly')\n",
    "        exp_combo.pack(pady=5)\n",
    "        \n",
    "        tk.Label(scrollable_frame, text=\"Availability:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        avail_text = tk.Text(scrollable_frame, width=40, height=6)\n",
    "        avail_text.pack(pady=5)\n",
    "        \n",
    "        # Fill form if editing\n",
    "        if mode == 'edit' and official_data:\n",
    "            name_entry.insert(0, official_data[1] or '')\n",
    "            email_entry.insert(0, official_data[2] or '')\n",
    "            phone_entry.insert(0, official_data[3] or '')\n",
    "            cert_text.insert('1.0', official_data[4] or '')\n",
    "            exp_var.set(official_data[5] or '')\n",
    "            avail_text.insert('1.0', official_data[6] or '')\n",
    "        \n",
    "        def save_official():\n",
    "            name = name_entry.get().strip()\n",
    "            email = email_entry.get().strip()\n",
    "            phone = phone_entry.get().strip()\n",
    "            certifications = cert_text.get('1.0', tk.END).strip()\n",
    "            experience = exp_var.get()\n",
    "            availability = avail_text.get('1.0', tk.END).strip()\n",
    "            \n",
    "            if not name:\n",
    "                messagebox.showerror(\"Error\", \"Name is required\")\n",
    "                return\n",
    "            \n",
    "            try:\n",
    "                if mode == 'add':\n",
    "                    self.cursor.execute(\"\"\"\n",
    "                        INSERT INTO officials (name, email, phone, certifications, \n",
    "                        experience_level, availability, created_date)\n",
    "                        VALUES (?, ?, ?, ?, ?, ?, ?)\n",
    "                    \"\"\", (name, email, phone, certifications, experience, availability,\n",
    "                          datetime.now().strftime('%Y-%m-%d %H:%M:%S')))\n",
    "                else:\n",
    "                    self.cursor.execute(\"\"\"\n",
    "                        UPDATE officials SET name = ?, email = ?, phone = ?, \n",
    "                        certifications = ?, experience_level = ?, availability = ?\n",
    "                        WHERE id = ?\n",
    "                    \"\"\", (name, email, phone, certifications, experience, availability, official_data[0]))\n",
    "                \n",
    "                self.conn.commit()\n",
    "                messagebox.showinfo(\"Success\", f\"Official {mode}ed successfully\")\n",
    "                form_window.destroy()\n",
    "                self.refresh_officials()\n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Error\", f\"Failed to {mode} official: {str(e)}\")\n",
    "        \n",
    "        tk.Button(scrollable_frame, text=f\"{mode.title()} Official\", command=save_official,\n",
    "                 bg='#27ae60', fg='white', font=('Arial', 12, 'bold')).pack(pady=20)\n",
    "        \n",
    "        # Pack canvas and scrollbar\n",
    "        canvas.pack(side=\"left\", fill=\"both\", expand=True)\n",
    "        scrollbar.pack(side=\"right\", fill=\"y\")\n",
    "    \n",
    "    def import_officials_csv(self):\n",
    "        \"\"\"Import officials from CSV file\"\"\"\n",
    "        file_path = filedialog.askopenfilename(\n",
    "            title=\"Select CSV file\",\n",
    "            filetypes=[(\"CSV files\", \"*.csv\")]\n",
    "        )\n",
    "        \n",
    "        if not file_path:\n",
    "            return\n",
    "        \n",
    "        try:\n",
    "            imported_count = 0\n",
    "            with open(file_path, 'r', newline='', encoding='utf-8') as csvfile:\n",
    "                reader = csv.DictReader(csvfile)\n",
    "                \n",
    "                for row in reader:\n",
    "                    first_name = row.get('first_name', '').strip()\n",
    "                    last_name = row.get('last_name', '').strip()\n",
    "                    \n",
    "                    # Combine first and last name\n",
    "                    name = f\"{first_name} {last_name}\".strip()\n",
    "                    if not name:\n",
    "                        continue\n",
    "                    \n",
    "                    email = row.get('email', '').strip()\n",
    "                    phone = row.get('phone', '').strip()\n",
    "                    address = row.get('address', '').strip()\n",
    "                    \n",
    "                    # Set default values for optional fields\n",
    "                    certifications = ''\n",
    "                    experience = 'Beginner'\n",
    "                    availability = address  # Use address as availability info for now\n",
    "                    \n",
    "                    # Check if official already exists\n",
    "                    self.cursor.execute(\"SELECT id FROM officials WHERE name = ?\", (name,))\n",
    "                    if self.cursor.fetchone():\n",
    "                        continue  # Skip duplicate\n",
    "                    \n",
    "                    self.cursor.execute(\"\"\"\n",
    "                        INSERT INTO officials (name, email, phone, certifications, \n",
    "                        experience_level, availability, created_date)\n",
    "                        VALUES (?, ?, ?, ?, ?, ?, ?)\n",
    "                    \"\"\", (name, email, phone, certifications, experience, availability,\n",
    "                          datetime.now().strftime('%Y-%m-%d %H:%M:%S')))\n",
    "                    \n",
    "                    imported_count += 1\n",
    "            \n",
    "            self.conn.commit()\n",
    "            messagebox.showinfo(\"Success\", f\"Imported {imported_count} officials successfully\")\n",
    "            self.refresh_officials()\n",
    "            \n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Error\", f\"Failed to import CSV: {str(e)}\")\n",
    "    \n",
    "    def export_officials_csv(self):\n",
    "        \"\"\"Export officials to CSV file\"\"\"\n",
    "        file_path = filedialog.asksaveasfilename(\n",
    "            title=\"Save CSV file\",\n",
    "            defaultextension=\".csv\",\n",
    "            filetypes=[(\"CSV files\", \"*.csv\")]\n",
    "        )\n",
    "        \n",
    "        if not file_path:\n",
    "            return\n",
    "        \n",
    "        try:\n",
    "            self.cursor.execute(\"SELECT * FROM officials ORDER BY name\")\n",
    "            officials = self.cursor.fetchall()\n",
    "            \n",
    "            with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:\n",
    "                fieldnames = ['id', 'name', 'email', 'phone', 'certifications', \n",
    "                             'experience_level', 'availability', 'created_date']\n",
    "                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n",
    "                \n",
    "                writer.writeheader()\n",
    "                for official in officials:\n",
    "                    writer.writerow({\n",
    "                        'id': official[0],\n",
    "                        'name': official[1],\n",
    "                        'email': official[2],\n",
    "                        'phone': official[3],\n",
    "                        'certifications': official[4],\n",
    "                        'experience_level': official[5],\n",
    "                        'availability': official[6],\n",
    "                        'created_date': official[7]\n",
    "                    })\n",
    "            \n",
    "            messagebox.showinfo(\"Success\", f\"Exported {len(officials)} officials to CSV\")\n",
    "            \n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Error\", f\"Failed to export CSV: {str(e)}\")\n",
    "    \n",
    "    def create_games_tab(self):\n",
    "        \"\"\"Create games management tab\"\"\"\n",
    "        games_frame = ttk.Frame(self.notebook)\n",
    "        self.notebook.add(games_frame, text=\"Games\")\n",
    "        \n",
    "        # Control frame\n",
    "        control_frame = tk.Frame(games_frame)\n",
    "        control_frame.pack(fill='x', padx=10, pady=5)\n",
    "        \n",
    "        # Buttons\n",
    "        tk.Button(control_frame, text=\"Add Game\", command=self.add_game,\n",
    "                 bg='#27ae60', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Add Multiple Games\", command=self.add_multiple_games,\n",
    "                 bg='#2ecc71', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Edit Game\", command=self.edit_game,\n",
    "                 bg='#f39c12', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Delete Game\", command=self.delete_game,\n",
    "                 bg='#e74c3c', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Link Games\", command=self.link_games,\n",
    "                 bg='#9b59b6', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Download Template\", command=self.generate_games_template,\n",
    "                 bg='#8e44ad', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Import CSV\", command=self.import_games_csv,\n",
    "                 bg='#16a085', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Refresh\", command=self.refresh_games,\n",
    "                 bg='#34495e', fg='white', font=('Arial', 10, 'bold')).pack(side='right', padx=5)\n",
    "        \n",
    "        # Games treeview\n",
    "        columns = ('ID', 'Date', 'Time', 'Home Team', 'Away Team', 'Location', 'Sport', 'League', 'Level', 'Officials Needed', 'Linked Group')\n",
    "        self.games_tree = ttk.Treeview(games_frame, columns=columns, show='headings', height=20)\n",
    "        \n",
    "        for col in columns:\n",
    "            self.games_tree.heading(col, text=col)\n",
    "            if col == 'ID':\n",
    "                self.games_tree.column(col, width=50)\n",
    "            elif col in ['Date', 'Time', 'Sport', 'Level']:\n",
    "                self.games_tree.column(col, width=100)\n",
    "            elif col == 'Officials Needed':\n",
    "                self.games_tree.column(col, width=80)\n",
    "            else:\n",
    "                self.games_tree.column(col, width=120)\n",
    "        \n",
    "        # Scrollbars\n",
    "        v_scrollbar = ttk.Scrollbar(games_frame, orient='vertical', command=self.games_tree.yview)\n",
    "        h_scrollbar = ttk.Scrollbar(games_frame, orient='horizontal', command=self.games_tree.xview)\n",
    "        self.games_tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)\n",
    "        \n",
    "        self.games_tree.pack(side='left', fill='both', expand=True, padx=(10, 0), pady=5)\n",
    "        v_scrollbar.pack(side='right', fill='y', padx=(0, 10), pady=5)\n",
    "        \n",
    "        self.refresh_games()\n",
    "    \n",
    "    def refresh_games(self):\n",
    "        \"\"\"Refresh games treeview\"\"\"\n",
    "        for item in self.games_tree.get_children():\n",
    "            self.games_tree.delete(item)\n",
    "        \n",
    "        self.cursor.execute(\"SELECT * FROM games ORDER BY date, time\")\n",
    "        games = self.cursor.fetchall()\n",
    "        \n",
    "        for game in games:\n",
    "            self.games_tree.insert('', 'end', values=game)\n",
    "    \n",
    "    def add_game(self):\n",
    "        \"\"\"Add new game\"\"\"\n",
    "        self.game_form_window(mode='add')\n",
    "    \n",
    "    def add_multiple_games(self):\n",
    "        \"\"\"Add multiple games at once\"\"\"\n",
    "        self.multiple_games_window()\n",
    "    \n",
    "    def edit_game(self):\n",
    "        \"\"\"Edit selected game\"\"\"\n",
    "        selection = self.games_tree.selection()\n",
    "        if not selection:\n",
    "            messagebox.showwarning(\"Warning\", \"Please select a game to edit\")\n",
    "            return\n",
    "        \n",
    "        item = self.games_tree.item(selection[0])\n",
    "        game_data = item['values']\n",
    "        self.game_form_window(mode='edit', game_data=game_data)\n",
    "    \n",
    "    def delete_game(self):\n",
    "        \"\"\"Delete selected game\"\"\"\n",
    "        selection = self.games_tree.selection()\n",
    "        if not selection:\n",
    "            messagebox.showwarning(\"Warning\", \"Please select a game to delete\")\n",
    "            return\n",
    "        \n",
    "        item = self.games_tree.item(selection[0])\n",
    "        game_data = item['values']\n",
    "        \n",
    "        if messagebox.askyesno(\"Confirm Delete\", f\"Are you sure you want to delete the game '{game_data[3]} vs {game_data[4]}'?\"):\n",
    "            try:\n",
    "                # Delete assignments first\n",
    "                self.cursor.execute(\"DELETE FROM assignments WHERE game_id = ?\", (game_data[0],))\n",
    "                # Delete game\n",
    "                self.cursor.execute(\"DELETE FROM games WHERE id = ?\", (game_data[0],))\n",
    "                self.conn.commit()\n",
    "                messagebox.showinfo(\"Success\", \"Game deleted successfully\")\n",
    "                self.refresh_games()\n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Error\", f\"Failed to delete game: {str(e)}\")\n",
    "    \n",
    "    def game_form_window(self, mode='add', game_data=None):\n",
    "        \"\"\"Game form window\"\"\"\n",
    "        form_window = tk.Toplevel(self.root)\n",
    "        form_window.title(f\"{mode.title()} Game\")\n",
    "        form_window.geometry(\"500x700\")\n",
    "        form_window.resizable(False, False)\n",
    "        \n",
    "        # Create scrollable frame\n",
    "        canvas = tk.Canvas(form_window)\n",
    "        scrollbar = ttk.Scrollbar(form_window, orient=\"vertical\", command=canvas.yview)\n",
    "        scrollable_frame = ttk.Frame(canvas)\n",
    "        \n",
    "        scrollable_frame.bind(\n",
    "            \"<Configure>\",\n",
    "            lambda e: canvas.configure(scrollregion=canvas.bbox(\"all\"))\n",
    "        )\n",
    "        \n",
    "        canvas.create_window((0, 0), window=scrollable_frame, anchor=\"nw\")\n",
    "        canvas.configure(yscrollcommand=scrollbar.set)\n",
    "        \n",
    "        # Form fields\n",
    "        tk.Label(scrollable_frame, text=\"Date (YYYY-MM-DD):\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        date_entry = tk.Entry(scrollable_frame, width=40)\n",
    "        date_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(scrollable_frame, text=\"Time (HH:MM):\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        time_entry = tk.Entry(scrollable_frame, width=40)\n",
    "        time_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(scrollable_frame, text=\"Home Team:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        home_entry = tk.Entry(scrollable_frame, width=40)\n",
    "        home_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(scrollable_frame, text=\"Away Team:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        away_entry = tk.Entry(scrollable_frame, width=40)\n",
    "        away_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(scrollable_frame, text=\"Location:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        location_var = tk.StringVar()\n",
    "        \n",
    "        # Get locations from database\n",
    "        self.cursor.execute(\"SELECT name FROM locations ORDER BY name\")\n",
    "        locations = [row[0] for row in self.cursor.fetchall()]\n",
    "        \n",
    "        location_combo = ttk.Combobox(scrollable_frame, textvariable=location_var, width=37, values=locations)\n",
    "        location_combo.pack(pady=5)\n",
    "        \n",
    "        tk.Label(scrollable_frame, text=\"Sport:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        sport_var = tk.StringVar()\n",
    "        sport_combo = ttk.Combobox(scrollable_frame, textvariable=sport_var, width=37,\n",
    "                                  values=['Basketball', 'Football', 'Soccer', 'Baseball', 'Softball', \n",
    "                                         'Volleyball', 'Tennis', 'Hockey', 'Wrestling', 'Track & Field'])\n",
    "        sport_combo.pack(pady=5)\n",
    "        \n",
    "        tk.Label(scrollable_frame, text=\"League:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        league_var = tk.StringVar()\n",
    "        \n",
    "        # Get leagues from database\n",
    "        self.cursor.execute(\"SELECT name FROM leagues ORDER BY name\")\n",
    "        leagues = [row[0] for row in self.cursor.fetchall()]\n",
    "        \n",
    "        league_combo = ttk.Combobox(scrollable_frame, textvariable=league_var, width=37, values=leagues)\n",
    "        league_combo.pack(pady=5)\n",
    "        \n",
    "        tk.Label(scrollable_frame, text=\"Level:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        level_var = tk.StringVar()\n",
    "        level_combo = ttk.Combobox(scrollable_frame, textvariable=level_var, width=37,\n",
    "                                  values=['Youth', 'JV', 'Varsity', 'College', 'Professional', 'Recreation'])\n",
    "        level_combo.pack(pady=5)\n",
    "        \n",
    "        tk.Label(scrollable_frame, text=\"Officials Needed:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        officials_needed_entry = tk.Entry(scrollable_frame, width=40)\n",
    "        officials_needed_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(scrollable_frame, text=\"Notes:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        notes_text = tk.Text(scrollable_frame, width=40, height=4)\n",
    "        notes_text.pack(pady=5)\n",
    "        \n",
    "        # Fill form if editing\n",
    "        if mode == 'edit' and game_data:\n",
    "            date_entry.insert(0, game_data[1] or '')\n",
    "            time_entry.insert(0, game_data[2] or '')\n",
    "            home_entry.insert(0, game_data[3] or '')\n",
    "            away_entry.insert(0, game_data[4] or '')\n",
    "            location_var.set(game_data[5] or '')\n",
    "            sport_var.set(game_data[6] or '')\n",
    "            league_var.set(game_data[7] or '')\n",
    "            level_var.set(game_data[8] or '')\n",
    "            officials_needed_entry.insert(0, str(game_data[9]) if game_data[9] else '1')\n",
    "            notes_text.insert('1.0', game_data[10] or '')\n",
    "        else:\n",
    "            officials_needed_entry.insert(0, '1')\n",
    "        \n",
    "        def save_game():\n",
    "            date = date_entry.get().strip()\n",
    "            time = time_entry.get().strip()\n",
    "            home_team = home_entry.get().strip()\n",
    "            away_team = away_entry.get().strip()\n",
    "            location = location_var.get().strip()\n",
    "            sport = sport_var.get().strip()\n",
    "            league = league_var.get().strip()\n",
    "            level = level_var.get().strip()\n",
    "            officials_needed = officials_needed_entry.get().strip()\n",
    "            notes = notes_text.get('1.0', tk.END).strip()\n",
    "            \n",
    "            # Validation\n",
    "            if not all([date, time, home_team, away_team, location, sport]):\n",
    "                messagebox.showerror(\"Error\", \"Date, time, teams, location, and sport are required\")\n",
    "                return\n",
    "            \n",
    "            # Validate date format\n",
    "            try:\n",
    "                datetime.strptime(date, '%Y-%m-%d')\n",
    "            except ValueError:\n",
    "                messagebox.showerror(\"Error\", \"Date must be in YYYY-MM-DD format\")\n",
    "                return\n",
    "            \n",
    "            # Validate time format\n",
    "            try:\n",
    "                datetime.strptime(time, '%H:%M')\n",
    "            except ValueError:\n",
    "                messagebox.showerror(\"Error\", \"Time must be in HH:MM format\")\n",
    "                return\n",
    "            \n",
    "            # Validate officials needed\n",
    "            try:\n",
    "                officials_needed = int(officials_needed) if officials_needed else 1\n",
    "                if officials_needed < 1:\n",
    "                    raise ValueError\n",
    "            except ValueError:\n",
    "                messagebox.showerror(\"Error\", \"Officials needed must be a positive number\")\n",
    "                return\n",
    "            \n",
    "            try:\n",
    "                if mode == 'add':\n",
    "                    self.cursor.execute(\"\"\"\n",
    "                        INSERT INTO games (date, time, home_team, away_team, location, \n",
    "                        sport, league, level, officials_needed, notes, created_date)\n",
    "                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n",
    "                    \"\"\", (date, time, home_team, away_team, location, sport, league, \n",
    "                          level, officials_needed, notes, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))\n",
    "                else:\n",
    "                    self.cursor.execute(\"\"\"\n",
    "                        UPDATE games SET date = ?, time = ?, home_team = ?, away_team = ?, \n",
    "                        location = ?, sport = ?, league = ?, level = ?, officials_needed = ?, notes = ?\n",
    "                        WHERE id = ?\n",
    "                    \"\"\", (date, time, home_team, away_team, location, sport, league, \n",
    "                          level, officials_needed, notes, game_data[0]))\n",
    "                \n",
    "                self.conn.commit()\n",
    "                messagebox.showinfo(\"Success\", f\"Game {mode}ed successfully\")\n",
    "                form_window.destroy()\n",
    "                self.refresh_games()\n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Error\", f\"Failed to {mode} game: {str(e)}\")\n",
    "        \n",
    "        tk.Button(scrollable_frame, text=f\"{mode.title()} Game\", command=save_game,\n",
    "                 bg='#27ae60', fg='white', font=('Arial', 12, 'bold')).pack(pady=20)\n",
    "        \n",
    "        # Pack canvas and scrollbar\n",
    "        canvas.pack(side=\"left\", fill=\"both\", expand=True)\n",
    "        scrollbar.pack(side=\"right\", fill=\"y\")\n",
    "    \n",
    "    def multiple_games_window(self):\n",
    "        \"\"\"Window for adding multiple games\"\"\"\n",
    "        multi_window = tk.Toplevel(self.root)\n",
    "        multi_window.title(\"Add Multiple Games\")\n",
    "        multi_window.geometry(\"600x800\")\n",
    "        \n",
    "        # Instructions\n",
    "        instructions = tk.Label(multi_window, \n",
    "                               text=\"Add multiple games with the same details but different dates/times\",\n",
    "                               font=('Arial', 12, 'bold'))\n",
    "        instructions.pack(pady=10)\n",
    "        \n",
    "        # Common details frame\n",
    "        details_frame = tk.LabelFrame(multi_window, text=\"Common Game Details\", font=('Arial', 11, 'bold'))\n",
    "        details_frame.pack(fill='x', padx=10, pady=5)\n",
    "        \n",
    "        # Home team\n",
    "        tk.Label(details_frame, text=\"Home Team:\", font=('Arial', 10, 'bold')).pack(anchor='w', padx=5, pady=2)\n",
    "        home_entry = tk.Entry(details_frame, width=50)\n",
    "        home_entry.pack(padx=5, pady=2)\n",
    "        \n",
    "        # Away team\n",
    "        tk.Label(details_frame, text=\"Away Team:\", font=('Arial', 10, 'bold')).pack(anchor='w', padx=5, pady=2)\n",
    "        away_entry = tk.Entry(details_frame, width=50)\n",
    "        away_entry.pack(padx=5, pady=2)\n",
    "        \n",
    "        # Location\n",
    "        tk.Label(details_frame, text=\"Location:\", font=('Arial', 10, 'bold')).pack(anchor='w', padx=5, pady=2)\n",
    "        location_var = tk.StringVar()\n",
    "        self.cursor.execute(\"SELECT name FROM locations ORDER BY name\")\n",
    "        locations = [row[0] for row in self.cursor.fetchall()]\n",
    "        location_combo = ttk.Combobox(details_frame, textvariable=location_var, width=47, values=locations)\n",
    "        location_combo.pack(padx=5, pady=2)\n",
    "        \n",
    "        # Sport\n",
    "        tk.Label(details_frame, text=\"Sport:\", font=('Arial', 10, 'bold')).pack(anchor='w', padx=5, pady=2)\n",
    "        sport_var = tk.StringVar()\n",
    "        sport_combo = ttk.Combobox(details_frame, textvariable=sport_var, width=47,\n",
    "                                  values=['Basketball', 'Football', 'Soccer', 'Baseball', 'Softball'])\n",
    "        sport_combo.pack(padx=5, pady=2)\n",
    "        \n",
    "        # League\n",
    "        tk.Label(details_frame, text=\"League:\", font=('Arial', 10, 'bold')).pack(anchor='w', padx=5, pady=2)\n",
    "        league_var = tk.StringVar()\n",
    "        self.cursor.execute(\"SELECT name FROM leagues ORDER BY name\")\n",
    "        leagues = [row[0] for row in self.cursor.fetchall()]\n",
    "        league_combo = ttk.Combobox(details_frame, textvariable=league_var, width=47, values=leagues)\n",
    "        league_combo.pack(padx=5, pady=2)\n",
    "        \n",
    "        # Level\n",
    "        tk.Label(details_frame, text=\"Level:\", font=('Arial', 10, 'bold')).pack(anchor='w', padx=5, pady=2)\n",
    "        level_var = tk.StringVar()\n",
    "        level_combo = ttk.Combobox(details_frame, textvariable=level_var, width=47,\n",
    "                                  values=['Youth', 'JV', 'Varsity', 'College', 'Professional'])\n",
    "        level_combo.pack(padx=5, pady=2)\n",
    "        \n",
    "        # Officials needed\n",
    "        tk.Label(details_frame, text=\"Officials Needed:\", font=('Arial', 10, 'bold')).pack(anchor='w', padx=5, pady=2)\n",
    "        officials_entry = tk.Entry(details_frame, width=50)\n",
    "        officials_entry.insert(0, '1')\n",
    "        officials_entry.pack(padx=5, pady=2)\n",
    "        \n",
    "        # Date/Time entries frame\n",
    "        datetime_frame = tk.LabelFrame(multi_window, text=\"Dates and Times\", font=('Arial', 11, 'bold'))\n",
    "        datetime_frame.pack(fill='both', expand=True, padx=10, pady=5)\n",
    "        \n",
    "        # Instructions for date/time format\n",
    "        format_label = tk.Label(datetime_frame, text=\"Enter one date/time per line (format: YYYY-MM-DD HH:MM)\",\n",
    "                               font=('Arial', 9), fg='blue')\n",
    "        format_label.pack(pady=5)\n",
    "        \n",
    "        # Text area for date/time entries\n",
    "        datetime_text = tk.Text(datetime_frame, width=60, height=15)\n",
    "        datetime_text.pack(fill='both', expand=True, padx=5, pady=5)\n",
    "        \n",
    "        # Add some example entries\n",
    "        datetime_text.insert('1.0', '2024-02-15 19:00\\n2024-02-16 20:00\\n2024-02-17 18:30\\n')\n",
    "        \n",
    "        # Buttons frame\n",
    "        buttons_frame = tk.Frame(multi_window)\n",
    "        buttons_frame.pack(fill='x', padx=10, pady=5)\n",
    "        \n",
    "        def create_games():\n",
    "            # Get common details\n",
    "            home_team = home_entry.get().strip()\n",
    "            away_team = away_entry.get().strip()\n",
    "            location = location_var.get().strip()\n",
    "            sport = sport_var.get().strip()\n",
    "            league = league_var.get().strip()\n",
    "            level = level_var.get().strip()\n",
    "            officials_needed = officials_entry.get().strip()\n",
    "            \n",
    "            # Validation\n",
    "            if not all([home_team, away_team, location, sport]):\n",
    "                messagebox.showerror(\"Error\", \"Home team, away team, location, and sport are required\")\n",
    "                return\n",
    "            \n",
    "            try:\n",
    "                officials_needed = int(officials_needed) if officials_needed else 1\n",
    "            except ValueError:\n",
    "                messagebox.showerror(\"Error\", \"Officials needed must be a number\")\n",
    "                return\n",
    "            \n",
    "            # Get date/time entries\n",
    "            datetime_entries = datetime_text.get('1.0', tk.END).strip().split('\\n')\n",
    "            datetime_entries = [entry.strip() for entry in datetime_entries if entry.strip()]\n",
    "            \n",
    "            if not datetime_entries:\n",
    "                messagebox.showerror(\"Error\", \"Please enter at least one date/time\")\n",
    "                return\n",
    "            \n",
    "            # Process each date/time entry\n",
    "            created_count = 0\n",
    "            errors = []\n",
    "            \n",
    "            for entry in datetime_entries:\n",
    "                try:\n",
    "                    # Parse date and time\n",
    "                    date_time_parts = entry.split(' ')\n",
    "                    if len(date_time_parts) != 2:\n",
    "                        errors.append(f\"Invalid format: {entry}\")\n",
    "                        continue\n",
    "                    \n",
    "                    date_part = date_time_parts[0]\n",
    "                    time_part = date_time_parts[1]\n",
    "                    \n",
    "                    # Validate date\n",
    "                    datetime.strptime(date_part, '%Y-%m-%d')\n",
    "                    # Validate time\n",
    "                    datetime.strptime(time_part, '%H:%M')\n",
    "                    \n",
    "                    # Create game\n",
    "                    self.cursor.execute(\"\"\"\n",
    "                        INSERT INTO games (date, time, home_team, away_team, location, \n",
    "                        sport, league, level, officials_needed, created_date)\n",
    "                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n",
    "                    \"\"\", (date_part, time_part, home_team, away_team, location, sport, \n",
    "                          league, level, officials_needed, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))\n",
    "                    \n",
    "                    created_count += 1\n",
    "                    \n",
    "                except Exception as e:\n",
    "                    errors.append(f\"Error with '{entry}': {str(e)}\")\n",
    "            \n",
    "            # Commit changes\n",
    "            self.conn.commit()\n",
    "            \n",
    "            # Show results\n",
    "            if created_count > 0:\n",
    "                messagebox.showinfo(\"Success\", f\"Created {created_count} games successfully\")\n",
    "                self.refresh_games()\n",
    "                if not errors:\n",
    "                    multi_window.destroy()\n",
    "            \n",
    "            if errors:\n",
    "                error_msg = f\"Created {created_count} games.\\n\\nErrors:\\n\" + '\\n'.join(errors[:5])\n",
    "                if len(errors) > 5:\n",
    "                    error_msg += f\"\\n... and {len(errors) - 5} more errors\"\n",
    "                messagebox.showwarning(\"Partial Success\", error_msg)\n",
    "        \n",
    "        tk.Button(buttons_frame, text=\"Create Games\", command=create_games,\n",
    "                 bg='#27ae60', fg='white', font=('Arial', 12, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(buttons_frame, text=\"Cancel\", command=multi_window.destroy,\n",
    "                 bg='#95a5a6', fg='white', font=('Arial', 12, 'bold')).pack(side='right', padx=5)\n",
    "    \n",
    "    def link_games(self):\n",
    "        \"\"\"Link multiple games together\"\"\"\n",
    "        link_window = tk.Toplevel(self.root)\n",
    "        link_window.title(\"Link Games\")\n",
    "        link_window.geometry(\"800x600\")\n",
    "        \n",
    "        tk.Label(link_window, text=\"Select games to link together\", \n",
    "                font=('Arial', 14, 'bold')).pack(pady=10)\n",
    "        \n",
    "        # Games selection frame\n",
    "        selection_frame = tk.Frame(link_window)\n",
    "        selection_frame.pack(fill='both', expand=True, padx=10, pady=5)\n",
    "        \n",
    "        # Available games listbox\n",
    "        tk.Label(selection_frame, text=\"Available Games:\", font=('Arial', 12, 'bold')).pack(anchor='w')\n",
    "        \n",
    "        games_listbox = tk.Listbox(selection_frame, selectmode=tk.MULTIPLE, height=15)\n",
    "        games_listbox.pack(fill='both', expand=True, pady=5)\n",
    "        \n",
    "        # Load games\n",
    "        self.cursor.execute(\"SELECT * FROM games ORDER BY date, time\")\n",
    "        games = self.cursor.fetchall()\n",
    "        \n",
    "        for game in games:\n",
    "            display_text = f\"{game[1]} {game[2]} - {game[3]} vs {game[4]} at {game[5]}\"\n",
    "            games_listbox.insert(tk.END, display_text)\n",
    "        \n",
    "        # Link group name\n",
    "        tk.Label(selection_frame, text=\"Link Group Name:\", font=('Arial', 10, 'bold')).pack(anchor='w', pady=(10, 0))\n",
    "        group_name_entry = tk.Entry(selection_frame, width=50)\n",
    "        group_name_entry.pack(pady=5)\n",
    "        \n",
    "        # Buttons\n",
    "        buttons_frame = tk.Frame(link_window)\n",
    "        buttons_frame.pack(fill='x', padx=10, pady=10)\n",
    "        \n",
    "        def create_link():\n",
    "            selected_indices = games_listbox.curselection()\n",
    "            if len(selected_indices) < 2:\n",
    "                messagebox.showerror(\"Error\", \"Please select at least 2 games to link\")\n",
    "                return\n",
    "            \n",
    "            group_name = group_name_entry.get().strip()\n",
    "            if not group_name:\n",
    "                messagebox.showerror(\"Error\", \"Please enter a group name\")\n",
    "                return\n",
    "            \n",
    "            # Generate unique group ID\n",
    "            import uuid\n",
    "            group_id = str(uuid.uuid4())\n",
    "            \n",
    "            try:\n",
    "                # Update selected games with the group ID\n",
    "                for index in selected_indices:\n",
    "                    game_id = games[index][0]  # Get game ID\n",
    "                    self.cursor.execute(\"UPDATE games SET linked_group_id = ? WHERE id = ?\", \n",
    "                                       (group_id, game_id))\n",
    "                \n",
    "                self.conn.commit()\n",
    "                messagebox.showinfo(\"Success\", f\"Linked {len(selected_indices)} games successfully\")\n",
    "                link_window.destroy()\n",
    "                self.refresh_games()\n",
    "                \n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Error\", f\"Failed to link games: {str(e)}\")\n",
    "        \n",
    "        tk.Button(buttons_frame, text=\"Link Games\", command=create_link,\n",
    "                 bg='#9b59b6', fg='white', font=('Arial', 12, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(buttons_frame, text=\"Cancel\", command=link_window.destroy,\n",
    "                 bg='#95a5a6', fg='white', font=('Arial', 12, 'bold')).pack(side='right', padx=5)\n",
    "    \n",
    "    def import_games_csv(self):\n",
    "        \"\"\"Import games from CSV file\"\"\"\n",
    "        file_path = filedialog.askopenfilename(\n",
    "            title=\"Select CSV file\",\n",
    "            filetypes=[(\"CSV files\", \"*.csv\")]\n",
    "        )\n",
    "        \n",
    "        if not file_path:\n",
    "            return\n",
    "        \n",
    "        try:\n",
    "            imported_count = 0\n",
    "            with open(file_path, 'r', newline='', encoding='utf-8') as csvfile:\n",
    "                reader = csv.DictReader(csvfile)\n",
    "                \n",
    "                for row in reader:\n",
    "                    date = row.get('date', '').strip()\n",
    "                    time = row.get('time', '').strip()\n",
    "                    location = row.get('location', '').strip()\n",
    "                    sport = row.get('sport', '').strip()\n",
    "                    league = row.get('league', '').strip()\n",
    "                    officials_needed = row.get('officials_needed', '1').strip()\n",
    "                    \n",
    "                    # Required fields validation\n",
    "                    if not all([date, time, location, sport, league]):\n",
    "                        continue\n",
    "                    \n",
    "                    # Optional fields\n",
    "                    home_team = row.get('home_team', '').strip() or 'TBD'\n",
    "                    away_team = row.get('away_team', '').strip() or 'TBD'\n",
    "                    notes = row.get('notes', '').strip()\n",
    "                    \n",
    "                    # Validate date and time formats\n",
    "                    try:\n",
    "                        datetime.strptime(date, '%Y-%m-%d')\n",
    "                        datetime.strptime(time, '%H:%M')\n",
    "                    except ValueError:\n",
    "                        continue\n",
    "                    \n",
    "                    level = 'Regular'  # Set default level\n",
    "                    \n",
    "                    try:\n",
    "                        officials_needed = int(officials_needed) if officials_needed else 1\n",
    "                    except ValueError:\n",
    "                        officials_needed = 1\n",
    "                    \n",
    "                    self.cursor.execute(\"\"\"\n",
    "                        INSERT INTO games (date, time, home_team, away_team, location, \n",
    "                        sport, league, level, officials_needed, notes, created_date)\n",
    "                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n",
    "                    \"\"\", (date, time, home_team, away_team, location, sport, league, \n",
    "                          level, officials_needed, notes, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))\n",
    "                    \n",
    "                    imported_count += 1\n",
    "            \n",
    "            self.conn.commit()\n",
    "            messagebox.showinfo(\"Success\", f\"Imported {imported_count} games successfully\")\n",
    "            self.refresh_games()\n",
    "            \n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Error\", f\"Failed to import CSV: {str(e)}\")\n",
    "    \n",
    "    def create_assignments_tab(self):\n",
    "        \"\"\"Create assignments management tab\"\"\"\n",
    "        assignments_frame = ttk.Frame(self.notebook)\n",
    "        self.notebook.add(assignments_frame, text=\"Assignments\")\n",
    "        \n",
    "        # Control frame\n",
    "        control_frame = tk.Frame(assignments_frame)\n",
    "        control_frame.pack(fill='x', padx=10, pady=5)\n",
    "        \n",
    "        # Buttons\n",
    "        tk.Button(control_frame, text=\"Create Assignment\", command=self.create_assignment,\n",
    "                 bg='#27ae60', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Bulk Assign\", command=self.bulk_assign,\n",
    "                 bg='#2ecc71', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Edit Assignment\", command=self.edit_assignment,\n",
    "                 bg='#f39c12', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Delete Assignment\", command=self.delete_assignment,\n",
    "                 bg='#e74c3c', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Assign to Linked Games\", command=self.assign_linked_games,\n",
    "                 bg='#9b59b6', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Refresh\", command=self.refresh_assignments,\n",
    "                 bg='#34495e', fg='white', font=('Arial', 10, 'bold')).pack(side='right', padx=5)\n",
    "        \n",
    "        # Assignments treeview\n",
    "        columns = ('ID', 'Game Date', 'Game Time', 'Teams', 'Location', 'Official', 'Position', 'Status', 'Assigned Date')\n",
    "        self.assignments_tree = ttk.Treeview(assignments_frame, columns=columns, show='headings', height=20)\n",
    "        \n",
    "        for col in columns:\n",
    "            self.assignments_tree.heading(col, text=col)\n",
    "            if col == 'ID':\n",
    "                self.assignments_tree.column(col, width=50)\n",
    "            elif col in ['Game Date', 'Game Time', 'Position', 'Status']:\n",
    "                self.assignments_tree.column(col, width=100)\n",
    "            elif col == 'Assigned Date':\n",
    "                self.assignments_tree.column(col, width=120)\n",
    "            else:\n",
    "                self.assignments_tree.column(col, width=150)\n",
    "        \n",
    "        # Scrollbars\n",
    "        v_scrollbar = ttk.Scrollbar(assignments_frame, orient='vertical', command=self.assignments_tree.yview)\n",
    "        h_scrollbar = ttk.Scrollbar(assignments_frame, orient='horizontal', command=self.assignments_tree.xview)\n",
    "        self.assignments_tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)\n",
    "        \n",
    "        self.assignments_tree.pack(side='left', fill='both', expand=True, padx=(10, 0), pady=5)\n",
    "        v_scrollbar.pack(side='right', fill='y', padx=(0, 10), pady=5)\n",
    "        \n",
    "        self.refresh_assignments()\n",
    "    \n",
    "    def refresh_assignments(self):\n",
    "        \"\"\"Refresh assignments treeview\"\"\"\n",
    "        for item in self.assignments_tree.get_children():\n",
    "            self.assignments_tree.delete(item)\n",
    "        \n",
    "        self.cursor.execute(\"\"\"\n",
    "            SELECT a.id, g.date, g.time, g.home_team || ' vs ' || g.away_team as teams,\n",
    "                   g.location, o.name, a.position, a.status, a.assigned_date\n",
    "            FROM assignments a\n",
    "            JOIN games g ON a.game_id = g.id\n",
    "            JOIN officials o ON a.official_id = o.id\n",
    "            ORDER BY g.date, g.time\n",
    "        \"\"\")\n",
    "        assignments = self.cursor.fetchall()\n",
    "        \n",
    "        for assignment in assignments:\n",
    "            self.assignments_tree.insert('', 'end', values=assignment)\n",
    "    \n",
    "    def create_assignment(self):\n",
    "        \"\"\"Create new assignment\"\"\"\n",
    "        self.assignment_form_window(mode='add')\n",
    "    \n",
    "    def edit_assignment(self):\n",
    "        \"\"\"Edit selected assignment\"\"\"\n",
    "        selection = self.assignments_tree.selection()\n",
    "        if not selection:\n",
    "            messagebox.showwarning(\"Warning\", \"Please select an assignment to edit\")\n",
    "            return\n",
    "        \n",
    "        item = self.assignments_tree.item(selection[0])\n",
    "        assignment_data = item['values']\n",
    "        self.assignment_form_window(mode='edit', assignment_data=assignment_data)\n",
    "    \n",
    "    def delete_assignment(self):\n",
    "        \"\"\"Delete selected assignment\"\"\"\n",
    "        selection = self.assignments_tree.selection()\n",
    "        if not selection:\n",
    "            messagebox.showwarning(\"Warning\", \"Please select an assignment to delete\")\n",
    "            return\n",
    "        \n",
    "        item = self.assignments_tree.item(selection[0])\n",
    "        assignment_data = item['values']\n",
    "        \n",
    "        if messagebox.askyesno(\"Confirm Delete\", f\"Are you sure you want to delete this assignment?\"):\n",
    "            try:\n",
    "                self.cursor.execute(\"DELETE FROM assignments WHERE id = ?\", (assignment_data[0],))\n",
    "                self.conn.commit()\n",
    "                messagebox.showinfo(\"Success\", \"Assignment deleted successfully\")\n",
    "                self.refresh_assignments()\n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Error\", f\"Failed to delete assignment: {str(e)}\")\n",
    "    \n",
    "    def assignment_form_window(self, mode='add', assignment_data=None):\n",
    "        \"\"\"Assignment form window\"\"\"\n",
    "        form_window = tk.Toplevel(self.root)\n",
    "        form_window.title(f\"{mode.title()} Assignment\")\n",
    "        form_window.geometry(\"500x400\")\n",
    "        form_window.resizable(False, False)\n",
    "        \n",
    "        # Game selection\n",
    "        tk.Label(form_window, text=\"Game:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        game_var = tk.StringVar()\n",
    "        \n",
    "        # Get games\n",
    "        self.cursor.execute(\"SELECT * FROM games ORDER BY date, time\")\n",
    "        games = self.cursor.fetchall()\n",
    "        game_options = []\n",
    "        game_dict = {}\n",
    "        \n",
    "        for game in games:\n",
    "            display_text = f\"{game[1]} {game[2]} - {game[3]} vs {game[4]} at {game[5]}\"\n",
    "            game_options.append(display_text)\n",
    "            game_dict[display_text] = game[0]  # Map display text to game ID\n",
    "        \n",
    "        game_combo = ttk.Combobox(form_window, textvariable=game_var, width=60, \n",
    "                                 values=game_options, state='readonly')\n",
    "        game_combo.pack(pady=5)\n",
    "        \n",
    "        # Official selection\n",
    "        tk.Label(form_window, text=\"Official:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        official_var = tk.StringVar()\n",
    "        \n",
    "        # Get officials\n",
    "        self.cursor.execute(\"SELECT * FROM officials ORDER BY name\")\n",
    "        officials = self.cursor.fetchall()\n",
    "        official_options = []\n",
    "        official_dict = {}\n",
    "        \n",
    "        for official in officials:\n",
    "            display_text = f\"{official[1]} - {official[2] or 'No email'}\"\n",
    "            official_options.append(display_text)\n",
    "            official_dict[display_text] = official[0]  # Map display text to official ID\n",
    "        \n",
    "        official_combo = ttk.Combobox(form_window, textvariable=official_var, width=60,\n",
    "                                     values=official_options, state='readonly')\n",
    "        official_combo.pack(pady=5)\n",
    "        \n",
    "        # Position\n",
    "        tk.Label(form_window, text=\"Position:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        position_var = tk.StringVar()\n",
    "        position_combo = ttk.Combobox(form_window, textvariable=position_var, width=60,\n",
    "                                     values=['Referee', 'Umpire', 'Linesman', 'Judge', 'Scorer', 'Timer'], \n",
    "                                     state='readonly')\n",
    "        position_combo.pack(pady=5)\n",
    "        \n",
    "        # Status\n",
    "        tk.Label(form_window, text=\"Status:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        status_var = tk.StringVar()\n",
    "        status_combo = ttk.Combobox(form_window, textvariable=status_var, width=60,\n",
    "                                   values=['assigned', 'confirmed', 'declined', 'completed'], \n",
    "                                   state='readonly')\n",
    "        status_combo.pack(pady=5)\n",
    "        \n",
    "        # Fill form if editing\n",
    "        if mode == 'edit' and assignment_data:\n",
    "            # Find matching game and official\n",
    "            assignment_id = assignment_data[0]\n",
    "            \n",
    "            # Get the full assignment data\n",
    "            self.cursor.execute(\"\"\"\n",
    "                SELECT a.*, g.date, g.time, g.home_team, g.away_team, g.location, o.name, o.email\n",
    "                FROM assignments a\n",
    "                JOIN games g ON a.game_id = g.id\n",
    "                JOIN officials o ON a.official_id = o.id\n",
    "                WHERE a.id = ?\n",
    "            \"\"\", (assignment_id,))\n",
    "            full_data = self.cursor.fetchone()\n",
    "            \n",
    "            if full_data:\n",
    "                # Set game\n",
    "                game_display = f\"{full_data[7]} {full_data[8]} - {full_data[9]} vs {full_data[10]} at {full_data[11]}\"\n",
    "                game_var.set(game_display)\n",
    "                \n",
    "                # Set official\n",
    "                official_display = f\"{full_data[12]} - {full_data[13] or 'No email'}\"\n",
    "                official_var.set(official_display)\n",
    "                \n",
    "                # Set other fields\n",
    "                position_var.set(full_data[3] or '')\n",
    "                status_var.set(full_data[4] or 'assigned')\n",
    "        else:\n",
    "            status_var.set('assigned')\n",
    "        \n",
    "        def save_assignment():\n",
    "            game_selection = game_var.get()\n",
    "            official_selection = official_var.get()\n",
    "            position = position_var.get()\n",
    "            status = status_var.get()\n",
    "            \n",
    "            if not all([game_selection, official_selection, position, status]):\n",
    "                messagebox.showerror(\"Error\", \"All fields are required\")\n",
    "                return\n",
    "            \n",
    "            game_id = game_dict.get(game_selection)\n",
    "            official_id = official_dict.get(official_selection)\n",
    "            \n",
    "            if not game_id or not official_id:\n",
    "                messagebox.showerror(\"Error\", \"Invalid game or official selection\")\n",
    "                return\n",
    "            \n",
    "            try:\n",
    "                if mode == 'add':\n",
    "                    # Check for existing assignment\n",
    "                    self.cursor.execute(\"\"\"\n",
    "                        SELECT id FROM assignments WHERE game_id = ? AND official_id = ?\n",
    "                    \"\"\", (game_id, official_id))\n",
    "                    if self.cursor.fetchone():\n",
    "                        messagebox.showerror(\"Error\", \"This official is already assigned to this game\")\n",
    "                        return\n",
    "                    \n",
    "                    self.cursor.execute(\"\"\"\n",
    "                        INSERT INTO assignments (game_id, official_id, position, status, assigned_date)\n",
    "                        VALUES (?, ?, ?, ?, ?)\n",
    "                    \"\"\", (game_id, official_id, position, status, \n",
    "                          datetime.now().strftime('%Y-%m-%d %H:%M:%S')))\n",
    "                else:\n",
    "                    self.cursor.execute(\"\"\"\n",
    "                        UPDATE assignments SET game_id = ?, official_id = ?, position = ?, status = ?\n",
    "                        WHERE id = ?\n",
    "                    \"\"\", (game_id, official_id, position, status, assignment_data[0]))\n",
    "                \n",
    "                self.conn.commit()\n",
    "                messagebox.showinfo(\"Success\", f\"Assignment {mode}ed successfully\")\n",
    "                form_window.destroy()\n",
    "                self.refresh_assignments()\n",
    "                \n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Error\", f\"Failed to {mode} assignment: {str(e)}\")\n",
    "        \n",
    "        tk.Button(form_window, text=f\"{mode.title()} Assignment\", command=save_assignment,\n",
    "                 bg='#27ae60', fg='white', font=('Arial', 12, 'bold')).pack(pady=20)\n",
    "    \n",
    "    def bulk_assign(self):\n",
    "        \"\"\"Bulk assignment window\"\"\"\n",
    "        bulk_window = tk.Toplevel(self.root)\n",
    "        bulk_window.title(\"Bulk Assignment\")\n",
    "        bulk_window.geometry(\"800x600\")\n",
    "        \n",
    "        tk.Label(bulk_window, text=\"Bulk Assignment Tool\", \n",
    "                font=('Arial', 16, 'bold')).pack(pady=10)\n",
    "        \n",
    "        # Main frame\n",
    "        main_frame = tk.Frame(bulk_window)\n",
    "        main_frame.pack(fill='both', expand=True, padx=10, pady=5)\n",
    "        \n",
    "        # Left frame - Games\n",
    "        left_frame = tk.Frame(main_frame)\n",
    "        left_frame.pack(side='left', fill='both', expand=True, padx=(0, 5))\n",
    "        \n",
    "        tk.Label(left_frame, text=\"Select Games:\", font=('Arial', 12, 'bold')).pack()\n",
    "        \n",
    "        games_listbox = tk.Listbox(left_frame, selectmode=tk.MULTIPLE, height=20)\n",
    "        games_listbox.pack(fill='both', expand=True, pady=5)\n",
    "        \n",
    "        # Load games\n",
    "        self.cursor.execute(\"SELECT * FROM games ORDER BY date, time\")\n",
    "        games = self.cursor.fetchall()\n",
    "        \n",
    "        for game in games:\n",
    "            display_text = f\"{game[1]} {game[2]} - {game[3]} vs {game[4]}\"\n",
    "            games_listbox.insert(tk.END, display_text)\n",
    "        \n",
    "        # Right frame - Officials\n",
    "        right_frame = tk.Frame(main_frame)\n",
    "        right_frame.pack(side='right', fill='both', expand=True, padx=(5, 0))\n",
    "        \n",
    "        tk.Label(right_frame, text=\"Select Officials:\", font=('Arial', 12, 'bold')).pack()\n",
    "        \n",
    "        officials_listbox = tk.Listbox(right_frame, selectmode=tk.MULTIPLE, height=20)\n",
    "        officials_listbox.pack(fill='both', expand=True, pady=5)\n",
    "        \n",
    "        # Load officials\n",
    "        self.cursor.execute(\"SELECT * FROM officials ORDER BY name\")\n",
    "        officials = self.cursor.fetchall()\n",
    "        \n",
    "        for official in officials:\n",
    "            officials_listbox.insert(tk.END, official[1])\n",
    "        \n",
    "        # Options frame\n",
    "        options_frame = tk.Frame(bulk_window)\n",
    "        options_frame.pack(fill='x', padx=10, pady=5)\n",
    "        \n",
    "        tk.Label(options_frame, text=\"Default Position:\", font=('Arial', 10, 'bold')).pack(side='left')\n",
    "        position_var = tk.StringVar(value='Referee')\n",
    "        position_combo = ttk.Combobox(options_frame, textvariable=position_var, width=15,\n",
    "                                     values=['Referee', 'Umpire', 'Linesman', 'Judge'], state='readonly')\n",
    "        position_combo.pack(side='left', padx=5)\n",
    "        \n",
    "        # Buttons\n",
    "        buttons_frame = tk.Frame(bulk_window)\n",
    "        buttons_frame.pack(fill='x', padx=10, pady=10)\n",
    "        \n",
    "        def create_bulk_assignments():\n",
    "            selected_games = [games[i] for i in games_listbox.curselection()]\n",
    "            selected_officials = [officials[i] for i in officials_listbox.curselection()]\n",
    "            \n",
    "            if not selected_games:\n",
    "                messagebox.showerror(\"Error\", \"Please select at least one game\")\n",
    "                return\n",
    "            \n",
    "            if not selected_officials:\n",
    "                messagebox.showerror(\"Error\", \"Please select at least one official\")\n",
    "                return\n",
    "            \n",
    "            position = position_var.get()\n",
    "            created_count = 0\n",
    "            errors = []\n",
    "            \n",
    "            try:\n",
    "                for game in selected_games:\n",
    "                    for official in selected_officials:\n",
    "                        # Check if assignment already exists\n",
    "                        self.cursor.execute(\"\"\"\n",
    "                            SELECT id FROM assignments WHERE game_id = ? AND official_id = ?\n",
    "                        \"\"\", (game[0], official[0]))\n",
    "                        \n",
    "                        if self.cursor.fetchone():\n",
    "                            errors.append(f\"Assignment already exists: {official[1]} -> {game[3]} vs {game[4]}\")\n",
    "                            continue\n",
    "                        \n",
    "                        # Create assignment\n",
    "                        self.cursor.execute(\"\"\"\n",
    "                            INSERT INTO assignments (game_id, official_id, position, status, assigned_date)\n",
    "                            VALUES (?, ?, ?, ?, ?)\n",
    "                        \"\"\", (game[0], official[0], position, 'assigned',\n",
    "                              datetime.now().strftime('%Y-%m-%d %H:%M:%S')))\n",
    "                        \n",
    "                        created_count += 1\n",
    "                \n",
    "                self.conn.commit()\n",
    "                \n",
    "                if created_count > 0:\n",
    "                    messagebox.showinfo(\"Success\", f\"Created {created_count} assignments successfully\")\n",
    "                    self.refresh_assignments()\n",
    "                \n",
    "                if errors:\n",
    "                    error_msg = f\"Created {created_count} assignments.\\n\\nSkipped duplicates:\\n\"\n",
    "                    error_msg += '\\n'.join(errors[:5])\n",
    "                    if len(errors) > 5:\n",
    "                        error_msg += f\"\\n... and {len(errors) - 5} more\"\n",
    "                    messagebox.showwarning(\"Partial Success\", error_msg)\n",
    "                \n",
    "                if created_count > 0 and not errors:\n",
    "                    bulk_window.destroy()\n",
    "                    \n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Error\", f\"Failed to create bulk assignments: {str(e)}\")\n",
    "        \n",
    "        tk.Button(buttons_frame, text=\"Create Assignments\", command=create_bulk_assignments,\n",
    "                 bg='#27ae60', fg='white', font=('Arial', 12, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(buttons_frame, text=\"Cancel\", command=bulk_window.destroy,\n",
    "                 bg='#95a5a6', fg='white', font=('Arial', 12, 'bold')).pack(side='right', padx=5)\n",
    "    \n",
    "    def assign_linked_games(self):\n",
    "        \"\"\"Assign officials to all games in a linked group\"\"\"\n",
    "        # Get linked game groups\n",
    "        self.cursor.execute(\"\"\"\n",
    "            SELECT linked_group_id, COUNT(*) as game_count\n",
    "            FROM games \n",
    "            WHERE linked_group_id IS NOT NULL \n",
    "            GROUP BY linked_group_id\n",
    "        \"\"\")\n",
    "        linked_groups = self.cursor.fetchall()\n",
    "        \n",
    "        if not linked_groups:\n",
    "            messagebox.showinfo(\"Info\", \"No linked game groups found\")\n",
    "            return\n",
    "        \n",
    "        assign_window = tk.Toplevel(self.root)\n",
    "        assign_window.title(\"Assign to Linked Games\")\n",
    "        assign_window.geometry(\"600x500\")\n",
    "        \n",
    "        tk.Label(assign_window, text=\"Assign Officials to Linked Game Groups\", \n",
    "                font=('Arial', 14, 'bold')).pack(pady=10)\n",
    "        \n",
    "        # Group selection\n",
    "        tk.Label(assign_window, text=\"Select Linked Group:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        group_var = tk.StringVar()\n",
    "        \n",
    "        group_options = []\n",
    "        group_dict = {}\n",
    "        \n",
    "        for group in linked_groups:\n",
    "            group_id = group[0]\n",
    "            game_count = group[1]\n",
    "            \n",
    "            # Get sample game info for display\n",
    "            self.cursor.execute(\"\"\"\n",
    "                SELECT home_team, away_team, date FROM games \n",
    "                WHERE linked_group_id = ? LIMIT 1\n",
    "            \"\"\", (group_id,))\n",
    "            sample_game = self.cursor.fetchone()\n",
    "            \n",
    "            if sample_game:\n",
    "                display_text = f\"{sample_game[0]} vs {sample_game[1]} series ({game_count} games) - {sample_game[2]}\"\n",
    "                group_options.append(display_text)\n",
    "                group_dict[display_text] = group_id\n",
    "        \n",
    "        group_combo = ttk.Combobox(assign_window, textvariable=group_var, width=70,\n",
    "                                  values=group_options, state='readonly')\n",
    "        group_combo.pack(pady=5)\n",
    "        \n",
    "        # Official selection\n",
    "        tk.Label(assign_window, text=\"Select Officials:\", font=('Arial', 10, 'bold')).pack(pady=(20, 5))\n",
    "        \n",
    "        officials_frame = tk.Frame(assign_window)\n",
    "        officials_frame.pack(fill='both', expand=True, padx=20, pady=5)\n",
    "        \n",
    "        officials_listbox = tk.Listbox(officials_frame, selectmode=tk.MULTIPLE, height=10)\n",
    "        officials_listbox.pack(fill='both', expand=True)\n",
    "        \n",
    "        # Load officials\n",
    "        self.cursor.execute(\"SELECT * FROM officials ORDER BY name\")\n",
    "        officials = self.cursor.fetchall()\n",
    "        \n",
    "        for official in officials:\n",
    "            officials_listbox.insert(tk.END, official[1])\n",
    "        \n",
    "        # Position\n",
    "        tk.Label(assign_window, text=\"Position:\", font=('Arial', 10, 'bold')).pack(pady=(10, 5))\n",
    "        position_var = tk.StringVar(value='Referee')\n",
    "        position_combo = ttk.Combobox(assign_window, textvariable=position_var, width=20,\n",
    "                                     values=['Referee', 'Umpire', 'Linesman', 'Judge'], state='readonly')\n",
    "        position_combo.pack(pady=5)\n",
    "        \n",
    "        # Buttons\n",
    "        buttons_frame = tk.Frame(assign_window)\n",
    "        buttons_frame.pack(fill='x', padx=20, pady=20)\n",
    "        \n",
    "        def assign_to_group():\n",
    "            group_selection = group_var.get()\n",
    "            if not group_selection:\n",
    "                messagebox.showerror(\"Error\", \"Please select a linked group\")\n",
    "                return\n",
    "            \n",
    "            selected_officials = [officials[i] for i in officials_listbox.curselection()]\n",
    "            if not selected_officials:\n",
    "                messagebox.showerror(\"Error\", \"Please select at least one official\")\n",
    "                return\n",
    "            \n",
    "            group_id = group_dict[group_selection]\n",
    "            position = position_var.get()\n",
    "            \n",
    "            # Get all games in the group\n",
    "            self.cursor.execute(\"SELECT * FROM games WHERE linked_group_id = ?\", (group_id,))\n",
    "            group_games = self.cursor.fetchall()\n",
    "            \n",
    "            created_count = 0\n",
    "            errors = []\n",
    "            \n",
    "            try:\n",
    "                for game in group_games:\n",
    "                    for official in selected_officials:\n",
    "                        # Check if assignment already exists\n",
    "                        self.cursor.execute(\"\"\"\n",
    "                            SELECT id FROM assignments WHERE game_id = ? AND official_id = ?\n",
    "                        \"\"\", (game[0], official[0]))\n",
    "                        \n",
    "                        if self.cursor.fetchone():\n",
    "                            errors.append(f\"Assignment exists: {official[1]} -> {game[3]} vs {game[4]} on {game[1]}\")\n",
    "                            continue\n",
    "                        \n",
    "                        # Create assignment\n",
    "                        self.cursor.execute(\"\"\"\n",
    "                            INSERT INTO assignments (game_id, official_id, position, status, assigned_date)\n",
    "                            VALUES (?, ?, ?, ?, ?)\n",
    "                        \"\"\", (game[0], official[0], position, 'assigned',\n",
    "                              datetime.now().strftime('%Y-%m-%d %H:%M:%S')))\n",
    "                        \n",
    "                        created_count += 1\n",
    "                \n",
    "                self.conn.commit()\n",
    "                \n",
    "                if created_count > 0:\n",
    "                    messagebox.showinfo(\"Success\", f\"Created {created_count} assignments for linked games\")\n",
    "                    self.refresh_assignments()\n",
    "                \n",
    "                if errors:\n",
    "                    error_msg = f\"Created {created_count} assignments.\\n\\nSkipped duplicates:\\n\"\n",
    "                    error_msg += '\\n'.join(errors[:3])\n",
    "                    if len(errors) > 3:\n",
    "                        error_msg += f\"\\n... and {len(errors) - 3} more\"\n",
    "                    messagebox.showwarning(\"Partial Success\", error_msg)\n",
    "                \n",
    "                if created_count > 0:\n",
    "                    assign_window.destroy()\n",
    "                    \n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Error\", f\"Failed to assign to linked games: {str(e)}\")\n",
    "        \n",
    "        tk.Button(buttons_frame, text=\"Assign to All Games\", command=assign_to_group,\n",
    "                 bg='#9b59b6', fg='white', font=('Arial', 12, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(buttons_frame, text=\"Cancel\", command=assign_window.destroy,\n",
    "                 bg='#95a5a6', fg='white', font=('Arial', 12, 'bold')).pack(side='right', padx=5)\n",
    "    \n",
    "    def create_leagues_tab(self):\n",
    "        \"\"\"Create leagues management tab\"\"\"\n",
    "        leagues_frame = ttk.Frame(self.notebook)\n",
    "        self.notebook.add(leagues_frame, text=\"Leagues\")\n",
    "        \n",
    "        # Control frame\n",
    "        control_frame = tk.Frame(leagues_frame)\n",
    "        control_frame.pack(fill='x', padx=10, pady=5)\n",
    "        \n",
    "        # Buttons\n",
    "        tk.Button(control_frame, text=\"Add League\", command=self.add_league,\n",
    "                 bg='#27ae60', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Edit League\", command=self.edit_league,\n",
    "                 bg='#f39c12', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Delete League\", command=self.delete_league,\n",
    "                 bg='#e74c3c', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Refresh\", command=self.refresh_leagues,\n",
    "                 bg='#34495e', fg='white', font=('Arial', 10, 'bold')).pack(side='right', padx=5)\n",
    "        \n",
    "        # Leagues treeview\n",
    "        columns = ('ID', 'Name', 'Sport', 'Description', 'Created Date')\n",
    "        self.leagues_tree = ttk.Treeview(leagues_frame, columns=columns, show='headings', height=20)\n",
    "        \n",
    "        for col in columns:\n",
    "            self.leagues_tree.heading(col, text=col)\n",
    "            if col == 'ID':\n",
    "                self.leagues_tree.column(col, width=50)\n",
    "            elif col in ['Name', 'Sport']:\n",
    "                self.leagues_tree.column(col, width=150)\n",
    "            elif col == 'Created Date':\n",
    "                self.leagues_tree.column(col, width=120)\n",
    "            else:\n",
    "                self.leagues_tree.column(col, width=200)\n",
    "        \n",
    "        # Scrollbars\n",
    "        v_scrollbar = ttk.Scrollbar(leagues_frame, orient='vertical', command=self.leagues_tree.yview)\n",
    "        self.leagues_tree.configure(yscrollcommand=v_scrollbar.set)\n",
    "        \n",
    "        self.leagues_tree.pack(side='left', fill='both', expand=True, padx=(10, 0), pady=5)\n",
    "        v_scrollbar.pack(side='right', fill='y', padx=(0, 10), pady=5)\n",
    "        \n",
    "        self.refresh_leagues()\n",
    "    \n",
    "    def refresh_leagues(self):\n",
    "        \"\"\"Refresh leagues treeview\"\"\"\n",
    "        for item in self.leagues_tree.get_children():\n",
    "            self.leagues_tree.delete(item)\n",
    "        \n",
    "        self.cursor.execute(\"SELECT * FROM leagues ORDER BY name\")\n",
    "        leagues = self.cursor.fetchall()\n",
    "        \n",
    "        for league in leagues:\n",
    "            self.leagues_tree.insert('', 'end', values=league)\n",
    "    \n",
    "    def add_league(self):\n",
    "        \"\"\"Add new league\"\"\"\n",
    "        self.league_form_window(mode='add')\n",
    "    \n",
    "    def edit_league(self):\n",
    "        \"\"\"Edit selected league\"\"\"\n",
    "        selection = self.leagues_tree.selection()\n",
    "        if not selection:\n",
    "            messagebox.showwarning(\"Warning\", \"Please select a league to edit\")\n",
    "            return\n",
    "        \n",
    "        item = self.leagues_tree.item(selection[0])\n",
    "        league_data = item['values']\n",
    "        self.league_form_window(mode='edit', league_data=league_data)\n",
    "    \n",
    "    def delete_league(self):\n",
    "        \"\"\"Delete selected league\"\"\"\n",
    "        selection = self.leagues_tree.selection()\n",
    "        if not selection:\n",
    "            messagebox.showwarning(\"Warning\", \"Please select a league to delete\")\n",
    "            return\n",
    "        \n",
    "        item = self.leagues_tree.item(selection[0])\n",
    "        league_data = item['values']\n",
    "        \n",
    "        if messagebox.askyesno(\"Confirm Delete\", f\"Are you sure you want to delete league '{league_data[1]}'?\"):\n",
    "            try:\n",
    "                self.cursor.execute(\"DELETE FROM leagues WHERE id = ?\", (league_data[0],))\n",
    "                self.conn.commit()\n",
    "                messagebox.showinfo(\"Success\", \"League deleted successfully\")\n",
    "                self.refresh_leagues()\n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Error\", f\"Failed to delete league: {str(e)}\")\n",
    "    \n",
    "    def league_form_window(self, mode='add', league_data=None):\n",
    "        \"\"\"League form window\"\"\"\n",
    "        form_window = tk.Toplevel(self.root)\n",
    "        form_window.title(f\"{mode.title()} League\")\n",
    "        form_window.geometry(\"400x350\")\n",
    "        form_window.resizable(False, False)\n",
    "        \n",
    "        tk.Label(form_window, text=\"League Name:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        name_entry = tk.Entry(form_window, width=40)\n",
    "        name_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(form_window, text=\"Sport:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        sport_var = tk.StringVar()\n",
    "        sport_combo = ttk.Combobox(form_window, textvariable=sport_var, width=37,\n",
    "                                  values=['Basketball', 'Football', 'Soccer', 'Baseball', 'Softball', \n",
    "                                         'Volleyball', 'Tennis', 'Hockey', 'Wrestling', 'Track & Field'])\n",
    "        sport_combo.pack(pady=5)\n",
    "        \n",
    "        tk.Label(form_window, text=\"Description:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        desc_text = tk.Text(form_window, width=40, height=8)\n",
    "        desc_text.pack(pady=5)\n",
    "        \n",
    "        if mode == 'edit' and league_data:\n",
    "            name_entry.insert(0, league_data[1])\n",
    "            sport_var.set(league_data[2])\n",
    "            desc_text.insert('1.0', league_data[3] or '')\n",
    "        \n",
    "        def save_league():\n",
    "            name = name_entry.get().strip()\n",
    "            sport = sport_var.get().strip()\n",
    "            description = desc_text.get('1.0', tk.END).strip()\n",
    "            \n",
    "            if not name or not sport:\n",
    "                messagebox.showerror(\"Error\", \"League name and sport are required\")\n",
    "                return\n",
    "            \n",
    "            try:\n",
    "                if mode == 'add':\n",
    "                    self.cursor.execute(\"\"\"\n",
    "                        INSERT INTO leagues (name, sport, description, created_date)\n",
    "                        VALUES (?, ?, ?, ?)\n",
    "                    \"\"\", (name, sport, description, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))\n",
    "                else:\n",
    "                    self.cursor.execute(\"\"\"\n",
    "                        UPDATE leagues SET name = ?, sport = ?, description = ? WHERE id = ?\n",
    "                    \"\"\", (name, sport, description, league_data[0]))\n",
    "                \n",
    "                self.conn.commit()\n",
    "                messagebox.showinfo(\"Success\", f\"League {mode}ed successfully\")\n",
    "                form_window.destroy()\n",
    "                self.refresh_leagues()\n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Error\", f\"Failed to {mode} league: {str(e)}\")\n",
    "        \n",
    "        tk.Button(form_window, text=f\"{mode.title()} League\", command=save_league,\n",
    "                 bg='#27ae60', fg='white', font=('Arial', 12, 'bold')).pack(pady=20)\n",
    "    \n",
    "    def create_locations_tab(self):\n",
    "        \"\"\"Create locations management tab\"\"\"\n",
    "        locations_frame = ttk.Frame(self.notebook)\n",
    "        self.notebook.add(locations_frame, text=\"Locations\")\n",
    "        \n",
    "        # Control frame\n",
    "        control_frame = tk.Frame(locations_frame)\n",
    "        control_frame.pack(fill='x', padx=10, pady=5)\n",
    "        \n",
    "        # Buttons\n",
    "        tk.Button(control_frame, text=\"Add Location\", command=self.add_location,\n",
    "                 bg='#27ae60', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Edit Location\", command=self.edit_location,\n",
    "                 bg='#f39c12', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Delete Location\", command=self.delete_location,\n",
    "                 bg='#e74c3c', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)\n",
    "        tk.Button(control_frame, text=\"Refresh\", command=self.refresh_locations,\n",
    "                 bg='#34495e', fg='white', font=('Arial', 10, 'bold')).pack(side='right', padx=5)\n",
    "        \n",
    "        # Locations treeview\n",
    "        columns = ('ID', 'Name', 'Address', 'City', 'State', 'ZIP', 'Notes')\n",
    "        self.locations_tree = ttk.Treeview(locations_frame, columns=columns, show='headings', height=20)\n",
    "        \n",
    "        for col in columns:\n",
    "            self.locations_tree.heading(col, text=col)\n",
    "            if col == 'ID':\n",
    "                self.locations_tree.column(col, width=50)\n",
    "            elif col in ['State', 'ZIP']:\n",
    "                self.locations_tree.column(col, width=80)\n",
    "            else:\n",
    "                self.locations_tree.column(col, width=150)\n",
    "        \n",
    "        # Scrollbars\n",
    "        v_scrollbar = ttk.Scrollbar(locations_frame, orient='vertical', command=self.locations_tree.yview)\n",
    "        h_scrollbar = ttk.Scrollbar(locations_frame, orient='horizontal', command=self.locations_tree.xview)\n",
    "        self.locations_tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)\n",
    "        \n",
    "        self.locations_tree.pack(side='left', fill='both', expand=True, padx=(10, 0), pady=5)\n",
    "        v_scrollbar.pack(side='right', fill='y', padx=(0, 10), pady=5)\n",
    "        \n",
    "        self.refresh_locations()\n",
    "    \n",
    "    def refresh_locations(self):\n",
    "        \"\"\"Refresh locations treeview\"\"\"\n",
    "        for item in self.locations_tree.get_children():\n",
    "            self.locations_tree.delete(item)\n",
    "        \n",
    "        self.cursor.execute(\"SELECT * FROM locations ORDER BY name\")\n",
    "        locations = self.cursor.fetchall()\n",
    "        \n",
    "        for location in locations:\n",
    "            # Only show first 7 columns (exclude created_date)\n",
    "            self.locations_tree.insert('', 'end', values=location[:7])\n",
    "\n",
    "    def add_search_filter_frame(self, parent_frame, tab_name):\n",
    "        \"\"\"Add search and filter frame to a tab\"\"\"\n",
    "        search_frame = tk.Frame(parent_frame, bg='#ecf0f1', height=50)\n",
    "        search_frame.pack(fill='x', padx=10, pady=5)\n",
    "        search_frame.pack_propagate(False)\n",
    "        \n",
    "        # Search box\n",
    "        tk.Label(search_frame, text=\"Search:\", font=('Arial', 10, 'bold'), \n",
    "                bg='#ecf0f1').pack(side='left', padx=5, pady=15)\n",
    "        \n",
    "        search_var = tk.StringVar()\n",
    "        search_entry = tk.Entry(search_frame, textvariable=search_var, width=30)\n",
    "        search_entry.pack(side='left', padx=5, pady=15)\n",
    "        \n",
    "        # Filter dropdown\n",
    "        tk.Label(search_frame, text=\"Filter:\", font=('Arial', 10, 'bold'), \n",
    "                bg='#ecf0f1').pack(side='left', padx=(20, 5), pady=15)\n",
    "        \n",
    "        filter_var = tk.StringVar()\n",
    "        filter_values = self.get_filter_values(tab_name)\n",
    "        filter_combo = ttk.Combobox(search_frame, textvariable=filter_var, \n",
    "                                   values=filter_values, width=20, state='readonly')\n",
    "        filter_combo.pack(side='left', padx=5, pady=15)\n",
    "        \n",
    "        # Clear button\n",
    "        clear_btn = tk.Button(search_frame, text=\"Clear\", \n",
    "                             command=lambda: self.clear_search_filter(search_var, filter_var, tab_name),\n",
    "                             bg='#95a5a6', fg='white', font=('Arial', 9))\n",
    "        clear_btn.pack(side='left', padx=10, pady=15)\n",
    "        \n",
    "        # Bind search events\n",
    "        search_var.trace('w', lambda *args: self.apply_search_filter(search_var.get(), filter_var.get(), tab_name))\n",
    "        filter_var.trace('w', lambda *args: self.apply_search_filter(search_var.get(), filter_var.get(), tab_name))\n",
    "        \n",
    "        # Store references\n",
    "        if not hasattr(self, 'search_vars'):\n",
    "            self.search_vars = {}\n",
    "            self.filter_vars = {}\n",
    "        self.search_vars[tab_name] = search_var\n",
    "        self.filter_vars[tab_name] = filter_var\n",
    "    \n",
    "    def get_filter_values(self, tab_name):\n",
    "        \"\"\"Get filter values for different tabs\"\"\"\n",
    "        if tab_name == 'games':\n",
    "            # Get unique sports and add date ranges\n",
    "            self.cursor.execute(\"SELECT DISTINCT sport FROM games WHERE sport != '' ORDER BY sport\")\n",
    "            sports = [row[0] for row in self.cursor.fetchall()]\n",
    "            return ['All'] + sports + ['This Week', 'This Month', 'Future Games']\n",
    "        elif tab_name == 'officials':\n",
    "            return ['All', 'Beginner', 'Intermediate', 'Advanced', 'Expert', 'Has Email', 'Has Phone']\n",
    "        elif tab_name == 'assignments':\n",
    "            return ['All', 'assigned', 'confirmed', 'declined', 'completed', 'This Week', 'This Month']\n",
    "        elif tab_name == 'users':\n",
    "            return ['All', 'superadmin', 'admin', 'assigner', 'official', 'Recent Login']\n",
    "        else:\n",
    "            return ['All']\n",
    "    \n",
    "    def apply_search_filter(self, search_term, filter_value, tab_name):\n",
    "        \"\"\"Apply search and filter to the specified tab\"\"\"\n",
    "        search_term = search_term.lower().strip()\n",
    "        \n",
    "        # Get the appropriate tree widget\n",
    "        tree_widget = None\n",
    "        if tab_name == 'games':\n",
    "            tree_widget = self.games_tree\n",
    "            self.filter_games(search_term, filter_value)\n",
    "        elif tab_name == 'officials':\n",
    "            tree_widget = self.officials_tree\n",
    "            self.filter_officials(search_term, filter_value)\n",
    "        elif tab_name == 'assignments':\n",
    "            tree_widget = self.assignments_tree\n",
    "            self.filter_assignments(search_term, filter_value)\n",
    "        elif tab_name == 'users':\n",
    "            tree_widget = self.users_tree\n",
    "            self.filter_users(search_term, filter_value)\n",
    "    \n",
    "    def filter_games(self, search_term, filter_value):\n",
    "        \"\"\"Filter games based on search term and filter value\"\"\"\n",
    "        # Clear existing items\n",
    "        for item in self.games_tree.get_children():\n",
    "            self.games_tree.delete(item)\n",
    "        \n",
    "        # Build query based on filters\n",
    "        query = \"SELECT * FROM games WHERE 1=1\"\n",
    "        params = []\n",
    "        \n",
    "        if search_term:\n",
    "            query += \" AND (LOWER(home_team) LIKE ? OR LOWER(away_team) LIKE ? OR LOWER(location) LIKE ? OR LOWER(sport) LIKE ?)\"\n",
    "            search_param = f\"%{search_term}%\"\n",
    "            params.extend([search_param, search_param, search_param, search_param])\n",
    "        \n",
    "        if filter_value and filter_value != 'All':\n",
    "            if filter_value in ['Basketball', 'Football', 'Soccer', 'Baseball', 'Softball', 'Volleyball']:\n",
    "                query += \" AND sport = ?\"\n",
    "                params.append(filter_value)\n",
    "            elif filter_value == 'This Week':\n",
    "                from datetime import datetime, timedelta\n",
    "                start_date = datetime.now().strftime('%Y-%m-%d')\n",
    "                end_date = (datetime.now() + timedelta(days=7)).strftime('%Y-%m-%d')\n",
    "                query += \" AND date BETWEEN ? AND ?\"\n",
    "                params.extend([start_date, end_date])\n",
    "            elif filter_value == 'This Month':\n",
    "                from datetime import datetime, timedelta\n",
    "                start_date = datetime.now().strftime('%Y-%m-%d')\n",
    "                end_date = (datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d')\n",
    "                query += \" AND date BETWEEN ? AND ?\"\n",
    "                params.extend([start_date, end_date])\n",
    "            elif filter_value == 'Future Games':\n",
    "                from datetime import datetime\n",
    "                current_date = datetime.now().strftime('%Y-%m-%d')\n",
    "                query += \" AND date >= ?\"\n",
    "                params.append(current_date)\n",
    "        \n",
    "        query += \" ORDER BY date, time\"\n",
    "        \n",
    "        self.cursor.execute(query, params)\n",
    "        games = self.cursor.fetchall()\n",
    "        \n",
    "        for game in games:\n",
    "            self.games_tree.insert('', 'end', values=game)\n",
    "    \n",
    "    def filter_officials(self, search_term, filter_value):\n",
    "        \"\"\"Filter officials based on search term and filter value\"\"\"\n",
    "        for item in self.officials_tree.get_children():\n",
    "            self.officials_tree.delete(item)\n",
    "        \n",
    "        query = \"SELECT * FROM officials WHERE 1=1\"\n",
    "        params = []\n",
    "        \n",
    "        if search_term:\n",
    "            query += \" AND (LOWER(name) LIKE ? OR LOWER(email) LIKE ? OR LOWER(phone) LIKE ?)\"\n",
    "            search_param = f\"%{search_term}%\"\n",
    "            params.extend([search_param, search_param, search_param])\n",
    "        \n",
    "        if filter_value and filter_value != 'All':\n",
    "            if filter_value in ['Beginner', 'Intermediate', 'Advanced', 'Expert']:\n",
    "                query += \" AND experience_level = ?\"\n",
    "                params.append(filter_value)\n",
    "            elif filter_value == 'Has Email':\n",
    "                query += \" AND email IS NOT NULL AND email != ''\"\n",
    "            elif filter_value == 'Has Phone':\n",
    "                query += \" AND phone IS NOT NULL AND phone != ''\"\n",
    "        \n",
    "        query += \" ORDER BY name\"\n",
    "        \n",
    "        self.cursor.execute(query, params)\n",
    "        officials = self.cursor.fetchall()\n",
    "        \n",
    "        for official in officials:\n",
    "            self.officials_tree.insert('', 'end', values=official)\n",
    "    \n",
    "    def filter_assignments(self, search_term, filter_value):\n",
    "        \"\"\"Filter assignments based on search term and filter value\"\"\"\n",
    "        for item in self.assignments_tree.get_children():\n",
    "            self.assignments_tree.delete(item)\n",
    "        \n",
    "        base_query = \"\"\"\n",
    "            SELECT a.id, g.date, g.time, g.home_team || ' vs ' || g.away_team as teams,\n",
    "                   g.location, o.name, a.position, a.status, a.assigned_date\n",
    "            FROM assignments a\n",
    "            JOIN games g ON a.game_id = g.id\n",
    "            JOIN officials o ON a.official_id = o.id\n",
    "            WHERE 1=1\n",
    "        \"\"\"\n",
    "        params = []\n",
    "        \n",
    "        if search_term:\n",
    "            base_query += \" AND (LOWER(o.name) LIKE ? OR LOWER(g.home_team) LIKE ? OR LOWER(g.away_team) LIKE ? OR LOWER(g.location) LIKE ?)\"\n",
    "            search_param = f\"%{search_term}%\"\n",
    "            params.extend([search_param, search_param, search_param, search_param])\n",
    "        \n",
    "        if filter_value and filter_value != 'All':\n",
    "            if filter_value in ['assigned', 'confirmed', 'declined', 'completed']:\n",
    "                base_query += \" AND a.status = ?\"\n",
    "                params.append(filter_value)\n",
    "            elif filter_value == 'This Week':\n",
    "                from datetime import datetime, timedelta\n",
    "                start_date = datetime.now().strftime('%Y-%m-%d')\n",
    "                end_date = (datetime.now() + timedelta(days=7)).strftime('%Y-%m-%d')\n",
    "                base_query += \" AND g.date BETWEEN ? AND ?\"\n",
    "                params.extend([start_date, end_date])\n",
    "            elif filter_value == 'This Month':\n",
    "                from datetime import datetime, timedelta\n",
    "                start_date = datetime.now().strftime('%Y-%m-%d')\n",
    "                end_date = (datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d')\n",
    "                base_query += \" AND g.date BETWEEN ? AND ?\"\n",
    "                params.extend([start_date, end_date])\n",
    "        \n",
    "        base_query += \" ORDER BY g.date, g.time\"\n",
    "        \n",
    "        self.cursor.execute(base_query, params)\n",
    "        assignments = self.cursor.fetchall()\n",
    "        \n",
    "        for assignment in assignments:\n",
    "            self.assignments_tree.insert('', 'end', values=assignment)\n",
    "    \n",
    "    def filter_users(self, search_term, filter_value):\n",
    "        \"\"\"Filter users based on search term and filter value\"\"\"\n",
    "        for item in self.users_tree.get_children():\n",
    "            self.users_tree.delete(item)\n",
    "        \n",
    "        query = \"SELECT * FROM users WHERE 1=1\"\n",
    "        params = []\n",
    "        \n",
    "        if search_term:\n",
    "            query += \" AND (LOWER(username) LIKE ? OR LOWER(full_name) LIKE ? OR LOWER(email) LIKE ?)\"\n",
    "            search_param = f\"%{search_term}%\"\n",
    "            params.extend([search_param, search_param, search_param])\n",
    "        \n",
    "        if filter_value and filter_value != 'All':\n",
    "            if filter_value in ['superadmin', 'admin', 'assigner', 'official']:\n",
    "                query += \" AND role = ?\"\n",
    "                params.append(filter_value)\n",
    "            elif filter_value == 'Recent Login':\n",
    "                from datetime import datetime, timedelta\n",
    "                recent_date = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')\n",
    "                query += \" AND last_login >= ?\"\n",
    "                params.append(recent_date)\n",
    "        \n",
    "        query += \" ORDER BY id\"\n",
    "        \n",
    "        self.cursor.execute(query, params)\n",
    "        users = self.cursor.fetchall()\n",
    "        \n",
    "        for user in users:\n",
    "            self.users_tree.insert('', 'end', values=user)\n",
    "    \n",
    "    def clear_search_filter(self, search_var, filter_var, tab_name):\n",
    "        \"\"\"Clear search and filter for the specified tab\"\"\"\n",
    "        search_var.set('')\n",
    "        filter_var.set('All')\n",
    "        \n",
    "        # Refresh the appropriate tab\n",
    "        if tab_name == 'games':\n",
    "            self.refresh_games()\n",
    "        elif tab_name == 'officials':\n",
    "            self.refresh_officials()\n",
    "        elif tab_name == 'assignments':\n",
    "            self.refresh_assignments()\n",
    "        elif tab_name == 'users':\n",
    "            self.refresh_users()\n",
    "    \n",
    "    def add_location(self):\n",
    "        \"\"\"Add new location\"\"\"\n",
    "        self.location_form_window(mode='add')\n",
    "    \n",
    "    def edit_location(self):\n",
    "        \"\"\"Edit selected location\"\"\"\n",
    "        selection = self.locations_tree.selection()\n",
    "        if not selection:\n",
    "            messagebox.showwarning(\"Warning\", \"Please select a location to edit\")\n",
    "            return\n",
    "        \n",
    "        item = self.locations_tree.item(selection[0])\n",
    "        location_data = item['values']\n",
    "        self.location_form_window(mode='edit', location_data=location_data)\n",
    "    \n",
    "    def delete_location(self):\n",
    "        \"\"\"Delete selected location\"\"\"\n",
    "        selection = self.locations_tree.selection()\n",
    "        if not selection:\n",
    "            messagebox.showwarning(\"Warning\", \"Please select a location to delete\")\n",
    "            return\n",
    "        \n",
    "        item = self.locations_tree.item(selection[0])\n",
    "        location_data = item['values']\n",
    "        \n",
    "        if messagebox.askyesno(\"Confirm Delete\", f\"Are you sure you want to delete location '{location_data[1]}'?\"):\n",
    "            try:\n",
    "                self.cursor.execute(\"DELETE FROM locations WHERE id = ?\", (location_data[0],))\n",
    "                self.conn.commit()\n",
    "                messagebox.showinfo(\"Success\", \"Location deleted successfully\")\n",
    "                self.refresh_locations()\n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Error\", f\"Failed to delete location: {str(e)}\")\n",
    "    \n",
    "    def location_form_window(self, mode='add', location_data=None):\n",
    "        \"\"\"Location form window\"\"\"\n",
    "        form_window = tk.Toplevel(self.root)\n",
    "        form_window.title(f\"{mode.title()} Location\")\n",
    "        form_window.geometry(\"400x500\")\n",
    "        form_window.resizable(False, False)\n",
    "        \n",
    "        tk.Label(form_window, text=\"Location Name:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        name_entry = tk.Entry(form_window, width=40)\n",
    "        name_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(form_window, text=\"Address:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        address_entry = tk.Entry(form_window, width=40)\n",
    "        address_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(form_window, text=\"City:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        city_entry = tk.Entry(form_window, width=40)\n",
    "        city_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(form_window, text=\"State:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        state_entry = tk.Entry(form_window, width=40)\n",
    "        state_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(form_window, text=\"ZIP Code:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        zip_entry = tk.Entry(form_window, width=40)\n",
    "        zip_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(form_window, text=\"Notes:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        notes_text = tk.Text(form_window, width=40, height=8)\n",
    "        notes_text.pack(pady=5)\n",
    "        \n",
    "        if mode == 'edit' and location_data:\n",
    "            name_entry.insert(0, location_data[1] or '')\n",
    "            address_entry.insert(0, location_data[2] or '')\n",
    "            city_entry.insert(0, location_data[3] or '')\n",
    "            state_entry.insert(0, location_data[4] or '')\n",
    "            zip_entry.insert(0, location_data[5] or '')\n",
    "            notes_text.insert('1.0', location_data[6] or '')\n",
    "        \n",
    "        def save_location():\n",
    "            name = name_entry.get().strip()\n",
    "            address = address_entry.get().strip()\n",
    "            city = city_entry.get().strip()\n",
    "            state = state_entry.get().strip()\n",
    "            zip_code = zip_entry.get().strip()\n",
    "            notes = notes_text.get('1.0', tk.END).strip()\n",
    "            \n",
    "            if not name:\n",
    "                messagebox.showerror(\"Error\", \"Location name is required\")\n",
    "                return\n",
    "            \n",
    "            try:\n",
    "                if mode == 'add':\n",
    "                    self.cursor.execute(\"\"\"\n",
    "                        INSERT INTO locations (name, address, city, state, zip_code, notes, created_date)\n",
    "                        VALUES (?, ?, ?, ?, ?, ?, ?)\n",
    "                    \"\"\", (name, address, city, state, zip_code, notes, \n",
    "                          datetime.now().strftime('%Y-%m-%d %H:%M:%S')))\n",
    "                else:\n",
    "                    self.cursor.execute(\"\"\"\n",
    "                        UPDATE locations SET name = ?, address = ?, city = ?, state = ?, \n",
    "                        zip_code = ?, notes = ? WHERE id = ?\n",
    "                    \"\"\", (name, address, city, state, zip_code, notes, location_data[0]))\n",
    "                \n",
    "                self.conn.commit()\n",
    "                messagebox.showinfo(\"Success\", f\"Location {mode}ed successfully\")\n",
    "                form_window.destroy()\n",
    "                self.refresh_locations()\n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Error\", f\"Failed to {mode} location: {str(e)}\")\n",
    "        \n",
    "        tk.Button(form_window, text=f\"{mode.title()} Location\", command=save_location,\n",
    "                 bg='#27ae60', fg='white', font=('Arial', 12, 'bold')).pack(pady=20)\n",
    "\n",
    "    def generate_officials_template(self):\n",
    "        \"\"\"Generate and download simplified officials CSV template\"\"\"\n",
    "        file_path = filedialog.asksaveasfilename(\n",
    "            title=\"Save Officials Template\",\n",
    "            defaultextension=\".csv\",\n",
    "            filetypes=[(\"CSV files\", \"*.csv\")],\n",
    "            initialfile=\"officials_template.csv\"\n",
    "        )\n",
    "    \n",
    "        if not file_path:\n",
    "            return\n",
    "    \n",
    "        try:\n",
    "            with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:\n",
    "                fieldnames = ['first_name', 'last_name', 'email', 'phone', 'address']\n",
    "                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n",
    "                \n",
    "                # Write header\n",
    "                writer.writeheader()\n",
    "                \n",
    "                # Write sample data\n",
    "                sample_data = [\n",
    "                    {\n",
    "                        'first_name': 'John',\n",
    "                        'last_name': 'Smith',\n",
    "                        'email': 'john.smith@email.com',\n",
    "                        'phone': '555-0123',\n",
    "                        'address': '123 Main St, City, State 12345'\n",
    "                    },\n",
    "                    {\n",
    "                        'first_name': 'Jane',\n",
    "                        'last_name': 'Doe',\n",
    "                        'email': 'jane.doe@email.com',\n",
    "                        'phone': '555-0456',\n",
    "                        'address': '456 Oak Ave, City, State 12345'\n",
    "                    }\n",
    "                ]\n",
    "                \n",
    "                for row in sample_data:\n",
    "                    writer.writerow(row)\n",
    "            \n",
    "            messagebox.showinfo(\"Success\", f\"Officials template saved to:\\n{file_path}\\n\\nRequired fields: First Name, Last Name, Email, Phone, Address\\nReplace sample data with your actual officials before importing.\")\n",
    "            \n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Error\", f\"Failed to create template: {str(e)}\")\n",
    "\n",
    "    def generate_games_template(self):\n",
    "        \"\"\"Generate and download simplified games CSV template\"\"\"\n",
    "        file_path = filedialog.asksaveasfilename(\n",
    "            title=\"Save Games Template\",\n",
    "            defaultextension=\".csv\",\n",
    "            filetypes=[(\"CSV files\", \"*.csv\")],\n",
    "            initialfile=\"games_template.csv\"\n",
    "        )\n",
    "        \n",
    "        if not file_path:\n",
    "            return\n",
    "        \n",
    "        try:\n",
    "            with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:\n",
    "                fieldnames = ['date', 'time', 'location', 'sport', 'league', 'officials_needed', 'home_team', 'away_team', 'notes']\n",
    "                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n",
    "                \n",
    "                # Write header\n",
    "                writer.writeheader()\n",
    "                \n",
    "                # Write sample data\n",
    "                sample_data = [\n",
    "                    {\n",
    "                        'date': '2024-03-15',\n",
    "                        'time': '19:00',\n",
    "                        'location': 'Main Gymnasium',\n",
    "                        'sport': 'Basketball',\n",
    "                        'league': 'High School League',\n",
    "                        'officials_needed': '2',\n",
    "                        'home_team': 'Eagles',\n",
    "                        'away_team': 'Hawks',\n",
    "                        'notes': 'Championship game'\n",
    "                    },\n",
    "                    {\n",
    "                        'date': '2024-03-16',\n",
    "                        'time': '18:30',\n",
    "                        'location': 'Sports Complex Field 1',\n",
    "                        'sport': 'Soccer',\n",
    "                        'league': 'Youth League',\n",
    "                        'officials_needed': '1',\n",
    "                        'home_team': '',\n",
    "                        'away_team': '',\n",
    "                        'notes': ''\n",
    "                    }\n",
    "                ]\n",
    "                \n",
    "                for row in sample_data:\n",
    "                    writer.writerow(row)\n",
    "            \n",
    "            messagebox.showinfo(\"Success\", f\"Games template saved to:\\n{file_path}\\n\\nRequired fields: Date, Time, Location, Sport, League, Officials Needed\\nOptional fields: Home Team, Away Team, Notes\\nReplace sample data with your actual games before importing.\")\n",
    "            \n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Error\", f\"Failed to create template: {str(e)}\")\n",
    "    \n",
    "    def create_reports_tab(self):\n",
    "        \"\"\"Create reports tab\"\"\"\n",
    "        reports_frame = ttk.Frame(self.notebook)\n",
    "        self.notebook.add(reports_frame, text=\"Reports\")\n",
    "        \n",
    "        # Title\n",
    "        title_label = tk.Label(reports_frame, text=\"Reports & Analytics\", \n",
    "                              font=('Arial', 18, 'bold'))\n",
    "        title_label.pack(pady=20)\n",
    "        \n",
    "        # Reports buttons frame\n",
    "        reports_buttons_frame = tk.Frame(reports_frame)\n",
    "        reports_buttons_frame.pack(pady=20)\n",
    "        \n",
    "        # Create report buttons\n",
    "        report_buttons = [\n",
    "            (\"Games Report\", self.generate_games_report, '#3498db'),\n",
    "            (\"Officials Report\", self.generate_officials_report, '#2ecc71'),\n",
    "            (\"Assignments Report\", self.generate_assignments_report, '#e67e22'),\n",
    "            (\"Availability Report\", self.generate_availability_report, '#9b59b6'),\n",
    "            (\"League Summary\", self.generate_league_summary, '#f39c12'),\n",
    "            (\"Export All Data\", self.export_all_data, '#34495e')\n",
    "        ]\n",
    "        \n",
    "        for i, (text, command, color) in enumerate(report_buttons):\n",
    "            row = i // 2\n",
    "            col = i % 2\n",
    "            \n",
    "            btn = tk.Button(reports_buttons_frame, text=text, command=command,\n",
    "                           bg=color, fg='white', font=('Arial', 12, 'bold'),\n",
    "                           width=20, height=2)\n",
    "            btn.grid(row=row, column=col, padx=20, pady=10)\n",
    "        \n",
    "        # Report display area\n",
    "        display_frame = tk.LabelFrame(reports_frame, text=\"Report Output\", font=('Arial', 12, 'bold'))\n",
    "        display_frame.pack(fill='both', expand=True, padx=20, pady=20)\n",
    "        \n",
    "        # Text widget for report output\n",
    "        self.report_text = tk.Text(display_frame, wrap=tk.WORD, font=('Courier', 10))\n",
    "        report_scrollbar = ttk.Scrollbar(display_frame, orient='vertical', command=self.report_text.yview)\n",
    "        self.report_text.configure(yscrollcommand=report_scrollbar.set)\n",
    "        \n",
    "        self.report_text.pack(side='left', fill='both', expand=True, padx=5, pady=5)\n",
    "        report_scrollbar.pack(side='right', fill='y', pady=5)\n",
    "    \n",
    "    def generate_games_report(self):\n",
    "        \"\"\"Generate games report\"\"\"\n",
    "        self.report_text.delete('1.0', tk.END)\n",
    "        \n",
    "        report = \"GAMES REPORT\\n\"\n",
    "        report += \"=\" * 50 + \"\\n\\n\"\n",
    "        \n",
    "        # Total games\n",
    "        self.cursor.execute(\"SELECT COUNT(*) FROM games\")\n",
    "        total_games = self.cursor.fetchone()[0]\n",
    "        report += f\"Total Games: {total_games}\\n\\n\"\n",
    "        \n",
    "        # Games by sport\n",
    "        report += \"Games by Sport:\\n\"\n",
    "        report += \"-\" * 20 + \"\\n\"\n",
    "        self.cursor.execute(\"SELECT sport, COUNT(*) FROM games GROUP BY sport ORDER BY COUNT(*) DESC\")\n",
    "        sports_data = self.cursor.fetchall()\n",
    "        for sport, count in sports_data:\n",
    "            report += f\"{sport}: {count}\\n\"\n",
    "        \n",
    "        report += \"\\n\"\n",
    "        \n",
    "        # Games by league\n",
    "        report += \"Games by League:\\n\"\n",
    "        report += \"-\" * 20 + \"\\n\"\n",
    "        self.cursor.execute(\"SELECT league, COUNT(*) FROM games WHERE league != '' GROUP BY league ORDER BY COUNT(*) DESC\")\n",
    "        leagues_data = self.cursor.fetchall()\n",
    "        for league, count in leagues_data:\n",
    "            report += f\"{league}: {count}\\n\"\n",
    "        \n",
    "        report += \"\\n\"\n",
    "        \n",
    "        # Upcoming games\n",
    "        report += \"Upcoming Games (Next 30 Days):\\n\"\n",
    "        report += \"-\" * 35 + \"\\n\"\n",
    "        from datetime import datetime, timedelta\n",
    "        future_date = (datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d')\n",
    "        current_date = datetime.now().strftime('%Y-%m-%d')\n",
    "        \n",
    "        self.cursor.execute(\"\"\"\n",
    "            SELECT date, time, home_team, away_team, location \n",
    "            FROM games \n",
    "            WHERE date BETWEEN ? AND ? \n",
    "            ORDER BY date, time\n",
    "        \"\"\", (current_date, future_date))\n",
    "        \n",
    "        upcoming_games = self.cursor.fetchall()\n",
    "        for game in upcoming_games:\n",
    "            report += f\"{game[0]} {game[1]} - {game[2]} vs {game[3]} at {game[4]}\\n\"\n",
    "        \n",
    "        self.report_text.insert('1.0', report)\n",
    "    \n",
    "    def generate_officials_report(self):\n",
    "        \"\"\"Generate officials report\"\"\"\n",
    "        self.report_text.delete('1.0', tk.END)\n",
    "        \n",
    "        report = \"OFFICIALS REPORT\\n\"\n",
    "        report += \"=\" * 50 + \"\\n\\n\"\n",
    "        \n",
    "        # Total officials\n",
    "        self.cursor.execute(\"SELECT COUNT(*) FROM officials\")\n",
    "        total_officials = self.cursor.fetchone()[0]\n",
    "        report += f\"Total Officials: {total_officials}\\n\\n\"\n",
    "        \n",
    "        # Officials by experience level\n",
    "        report += \"Officials by Experience Level:\\n\"\n",
    "        report += \"-\" * 35 + \"\\n\"\n",
    "        self.cursor.execute(\"SELECT experience_level, COUNT(*) FROM officials GROUP BY experience_level\")\n",
    "        exp_data = self.cursor.fetchall()\n",
    "        for exp_level, count in exp_data:\n",
    "            report += f\"{exp_level or 'Not specified'}: {count}\\n\"\n",
    "        \n",
    "        report += \"\\n\"\n",
    "        \n",
    "        # Assignment statistics\n",
    "        report += \"Assignment Statistics:\\n\"\n",
    "        report += \"-\" * 25 + \"\\n\"\n",
    "        self.cursor.execute(\"\"\"\n",
    "            SELECT o.name, COUNT(a.id) as assignment_count\n",
    "            FROM officials o\n",
    "            LEFT JOIN assignments a ON o.id = a.official_id\n",
    "            GROUP BY o.id, o.name\n",
    "            ORDER BY assignment_count DESC\n",
    "        \"\"\")\n",
    "        assignment_stats = self.cursor.fetchall()\n",
    "        \n",
    "        for official, count in assignment_stats:\n",
    "            report += f\"{official}: {count} assignments\\n\"\n",
    "        \n",
    "        self.report_text.insert('1.0', report)\n",
    "    \n",
    "    def generate_assignments_report(self):\n",
    "        \"\"\"Generate assignments report\"\"\"\n",
    "        self.report_text.delete('1.0', tk.END)\n",
    "        \n",
    "        report = \"ASSIGNMENTS REPORT\\n\"\n",
    "        report += \"=\" * 50 + \"\\n\\n\"\n",
    "        \n",
    "        # Total assignments\n",
    "        self.cursor.execute(\"SELECT COUNT(*) FROM assignments\")\n",
    "        total_assignments = self.cursor.fetchone()[0]\n",
    "        report += f\"Total Assignments: {total_assignments}\\n\\n\"\n",
    "        \n",
    "        # Assignments by status\n",
    "        report += \"Assignments by Status:\\n\"\n",
    "        report += \"-\" * 25 + \"\\n\"\n",
    "        self.cursor.execute(\"SELECT status, COUNT(*) FROM assignments GROUP BY status\")\n",
    "        status_data = self.cursor.fetchall()\n",
    "        for status, count in status_data:\n",
    "            report += f\"{status.title()}: {count}\\n\"\n",
    "        \n",
    "        report += \"\\n\"\n",
    "        \n",
    "        # Recent assignments\n",
    "        report += \"Recent Assignments (Last 30 Days):\\n\"\n",
    "        report += \"-\" * 40 + \"\\n\"\n",
    "        from datetime import datetime, timedelta\n",
    "        past_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')\n",
    "        \n",
    "        self.cursor.execute(\"\"\"\n",
    "            SELECT o.name, g.date, g.time, g.home_team, g.away_team, a.position, a.status\n",
    "            FROM assignments a\n",
    "            JOIN officials o ON a.official_id = o.id\n",
    "            JOIN games g ON a.game_id = g.id\n",
    "            WHERE a.assigned_date >= ?\n",
    "            ORDER BY a.assigned_date DESC\n",
    "        \"\"\", (past_date,))\n",
    "        \n",
    "        recent_assignments = self.cursor.fetchall()\n",
    "        for assignment in recent_assignments:\n",
    "            report += f\"{assignment[0]} - {assignment[1]} {assignment[2]} - {assignment[3]} vs {assignment[4]} ({assignment[5]}) - {assignment[6]}\\n\"\n",
    "        \n",
    "        self.report_text.insert('1.0', report)\n",
    "    \n",
    "    def generate_availability_report(self):\n",
    "        \"\"\"Generate availability report\"\"\"\n",
    "        self.report_text.delete('1.0', tk.END)\n",
    "        \n",
    "        report = \"AVAILABILITY REPORT\\n\"\n",
    "        report += \"=\" * 50 + \"\\n\\n\"\n",
    "        \n",
    "        # Officials availability\n",
    "        report += \"Officials Availability:\\n\"\n",
    "        report += \"-\" * 25 + \"\\n\"\n",
    "        self.cursor.execute(\"SELECT name, availability FROM officials WHERE availability != '' ORDER BY name\")\n",
    "        availability_data = self.cursor.fetchall()\n",
    "        \n",
    "        for official, availability in availability_data:\n",
    "            report += f\"{official}:\\n\"\n",
    "            report += f\"  {availability}\\n\\n\"\n",
    "        \n",
    "        if not availability_data:\n",
    "            report += \"No availability information recorded.\\n\"\n",
    "        \n",
    "        self.report_text.insert('1.0', report)\n",
    "    \n",
    "    def generate_league_summary(self):\n",
    "        \"\"\"Generate league summary report\"\"\"\n",
    "        self.report_text.delete('1.0', tk.END)\n",
    "        \n",
    "        report = \"LEAGUE SUMMARY REPORT\\n\"\n",
    "        report += \"=\" * 50 + \"\\n\\n\"\n",
    "        \n",
    "        # League statistics\n",
    "        self.cursor.execute(\"SELECT COUNT(*) FROM leagues\")\n",
    "        total_leagues = self.cursor.fetchone()[0]\n",
    "        report += f\"Total Leagues: {total_leagues}\\n\\n\"\n",
    "        \n",
    "        # League details\n",
    "        self.cursor.execute(\"SELECT * FROM leagues ORDER BY name\")\n",
    "        leagues = self.cursor.fetchall()\n",
    "        \n",
    "        for league in leagues:\n",
    "            report += f\"League: {league[1]}\\n\"\n",
    "            report += f\"Sport: {league[2]}\\n\"\n",
    "            report += f\"Description: {league[3] or 'No description'}\\n\"\n",
    "            \n",
    "            # Count games in this league\n",
    "            self.cursor.execute(\"SELECT COUNT(*) FROM games WHERE league = ?\", (league[1],))\n",
    "            game_count = self.cursor.fetchone()[0]\n",
    "            report += f\"Games: {game_count}\\n\"\n",
    "            report += \"-\" * 30 + \"\\n\\n\"\n",
    "        \n",
    "        self.report_text.insert('1.0', report)\n",
    "    \n",
    "    def export_all_data(self):\n",
    "        \"\"\"Export all data to CSV files\"\"\"\n",
    "        folder_path = filedialog.askdirectory(title=\"Select folder to save exports\")\n",
    "        if not folder_path:\n",
    "            return\n",
    "        \n",
    "        try:\n",
    "            import os\n",
    "            \n",
    "            # Export users\n",
    "            self.cursor.execute(\"SELECT * FROM users\")\n",
    "            users = self.cursor.fetchall()\n",
    "            with open(os.path.join(folder_path, 'users_export.csv'), 'w', newline='', encoding='utf-8') as f:\n",
    "                writer = csv.writer(f)\n",
    "                writer.writerow(['ID', 'Username', 'Role', 'Full Name', 'Email', 'Phone', 'Created Date', 'Last Login'])\n",
    "                for user in users:\n",
    "                    writer.writerow([user[0], user[1], user[3], user[4], user[5], user[6], user[7], user[8]])\n",
    "            \n",
    "            # Export officials\n",
    "            self.cursor.execute(\"SELECT * FROM officials\")\n",
    "            officials = self.cursor.fetchall()\n",
    "            with open(os.path.join(folder_path, 'officials_export.csv'), 'w', newline='', encoding='utf-8') as f:\n",
    "                writer = csv.writer(f)\n",
    "                writer.writerow(['ID', 'Name', 'Email', 'Phone', 'Certifications', 'Experience Level', 'Availability', 'Created Date'])\n",
    "                for official in officials:\n",
    "                    writer.writerow(official)\n",
    "            \n",
    "            # Export games\n",
    "            self.cursor.execute(\"SELECT * FROM games\")\n",
    "            games = self.cursor.fetchall()\n",
    "            with open(os.path.join(folder_path, 'games_export.csv'), 'w', newline='', encoding='utf-8') as f:\n",
    "                writer = csv.writer(f)\n",
    "                writer.writerow(['ID', 'Date', 'Time', 'Home Team', 'Away Team', 'Location', 'Sport', \n",
    "                               'League', 'Level', 'Officials Needed', 'Notes', 'Created Date', 'Linked Group ID'])\n",
    "                for game in games:\n",
    "                    writer.writerow(game)\n",
    "            \n",
    "            # Export assignments\n",
    "            self.cursor.execute(\"\"\"\n",
    "                SELECT a.id, g.date, g.time, g.home_team, g.away_team, g.location, \n",
    "                       o.name, a.position, a.status, a.assigned_date\n",
    "                FROM assignments a\n",
    "                JOIN games g ON a.game_id = g.id\n",
    "                JOIN officials o ON a.official_id = o.id\n",
    "            \"\"\")\n",
    "            assignments = self.cursor.fetchall()\n",
    "            with open(os.path.join(folder_path, 'assignments_export.csv'), 'w', newline='', encoding='utf-8') as f:\n",
    "                writer = csv.writer(f)\n",
    "                writer.writerow(['ID', 'Game Date', 'Game Time', 'Home Team', 'Away Team', 'Location', \n",
    "                               'Official', 'Position', 'Status', 'Assigned Date'])\n",
    "                for assignment in assignments:\n",
    "                    writer.writerow(assignment)\n",
    "            \n",
    "            # Export leagues\n",
    "            self.cursor.execute(\"SELECT * FROM leagues\")\n",
    "            leagues = self.cursor.fetchall()\n",
    "            with open(os.path.join(folder_path, 'leagues_export.csv'), 'w', newline='', encoding='utf-8') as f:\n",
    "                writer = csv.writer(f)\n",
    "                writer.writerow(['ID', 'Name', 'Sport', 'Description', 'Created Date'])\n",
    "                for league in leagues:\n",
    "                    writer.writerow(league)\n",
    "            \n",
    "            # Export locations\n",
    "            self.cursor.execute(\"SELECT * FROM locations\")\n",
    "            locations = self.cursor.fetchall()\n",
    "            with open(os.path.join(folder_path, 'locations_export.csv'), 'w', newline='', encoding='utf-8') as f:\n",
    "                writer = csv.writer(f)\n",
    "                writer.writerow(['ID', 'Name', 'Address', 'City', 'State', 'ZIP Code', 'Notes', 'Created Date'])\n",
    "                for location in locations:\n",
    "                    writer.writerow(location)\n",
    "            \n",
    "            messagebox.showinfo(\"Success\", f\"All data exported successfully to {folder_path}\")\n",
    "            \n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Error\", f\"Failed to export data: {str(e)}\")\n",
    "    \n",
    "    def create_my_profile_tab(self):\n",
    "        \"\"\"Create profile tab for officials\"\"\"\n",
    "        profile_frame = ttk.Frame(self.notebook)\n",
    "        self.notebook.add(profile_frame, text=\"My Profile\")\n",
    "        \n",
    "        # Get current user's official record\n",
    "        self.cursor.execute(\"SELECT * FROM officials WHERE name = ?\", (self.current_user,))\n",
    "        official_data = self.cursor.fetchone()\n",
    "        \n",
    "        if not official_data:\n",
    "            # Create official record if it doesn't exist\n",
    "            tk.Label(profile_frame, text=\"Profile Setup Required\", \n",
    "                    font=('Arial', 16, 'bold')).pack(pady=20)\n",
    "            \n",
    "            tk.Button(profile_frame, text=\"Create Profile\", \n",
    "                     command=self.create_official_profile,\n",
    "                     bg='#27ae60', fg='white', font=('Arial', 12, 'bold')).pack(pady=10)\n",
    "            return\n",
    "        \n",
    "        # Profile form\n",
    "        tk.Label(profile_frame, text=\"My Profile\", font=('Arial', 18, 'bold')).pack(pady=20)\n",
    "        \n",
    "        profile_form_frame = tk.Frame(profile_frame)\n",
    "        profile_form_frame.pack(padx=50, pady=20)\n",
    "        \n",
    "        # Name\n",
    "        tk.Label(profile_form_frame, text=\"Name:\", font=('Arial', 10, 'bold')).grid(row=0, column=0, sticky='w', pady=5)\n",
    "        self.profile_name_entry = tk.Entry(profile_form_frame, width=40)\n",
    "        self.profile_name_entry.grid(row=0, column=1, padx=10, pady=5)\n",
    "        self.profile_name_entry.insert(0, official_data[1] or '')\n",
    "        \n",
    "        # Email\n",
    "        tk.Label(profile_form_frame, text=\"Email:\", font=('Arial', 10, 'bold')).grid(row=1, column=0, sticky='w', pady=5)\n",
    "        self.profile_email_entry = tk.Entry(profile_form_frame, width=40)\n",
    "        self.profile_email_entry.grid(row=1, column=1, padx=10, pady=5)\n",
    "        self.profile_email_entry.insert(0, official_data[2] or '')\n",
    "        \n",
    "        # Phone\n",
    "        tk.Label(profile_form_frame, text=\"Phone:\", font=('Arial', 10, 'bold')).grid(row=2, column=0, sticky='w', pady=5)\n",
    "        self.profile_phone_entry = tk.Entry(profile_form_frame, width=40)\n",
    "        self.profile_phone_entry.grid(row=2, column=1, padx=10, pady=5)\n",
    "        self.profile_phone_entry.insert(0, official_data[3] or '')\n",
    "        \n",
    "        # Certifications\n",
    "        tk.Label(profile_form_frame, text=\"Certifications:\", font=('Arial', 10, 'bold')).grid(row=3, column=0, sticky='nw', pady=5)\n",
    "        self.profile_cert_text = tk.Text(profile_form_frame, width=40, height=4)\n",
    "        self.profile_cert_text.grid(row=3, column=1, padx=10, pady=5)\n",
    "        self.profile_cert_text.insert('1.0', official_data[4] or '')\n",
    "        \n",
    "        # Experience\n",
    "        tk.Label(profile_form_frame, text=\"Experience:\", font=('Arial', 10, 'bold')).grid(row=4, column=0, sticky='w', pady=5)\n",
    "        self.profile_exp_var = tk.StringVar(value=official_data[5] or '')\n",
    "        exp_combo = ttk.Combobox(profile_form_frame, textvariable=self.profile_exp_var, width=37,\n",
    "                                values=['Beginner', 'Intermediate', 'Advanced', 'Expert'], state='readonly')\n",
    "        exp_combo.grid(row=4, column=1, padx=10, pady=5)\n",
    "        \n",
    "        # Availability\n",
    "        tk.Label(profile_form_frame, text=\"Availability:\", font=('Arial', 10, 'bold')).grid(row=5, column=0, sticky='nw', pady=5)\n",
    "        self.profile_avail_text = tk.Text(profile_form_frame, width=40, height=6)\n",
    "        self.profile_avail_text.grid(row=5, column=1, padx=10, pady=5)\n",
    "        self.profile_avail_text.insert('1.0', official_data[6] or '')\n",
    "        \n",
    "        # Update button\n",
    "        tk.Button(profile_form_frame, text=\"Update Profile\", command=self.update_official_profile,\n",
    "                 bg='#3498db', fg='white', font=('Arial', 12, 'bold')).grid(row=6, column=1, pady=20)\n",
    "        \n",
    "        self.current_official_id = official_data[0]\n",
    "    \n",
    "    def create_official_profile(self):\n",
    "        \"\"\"Create official profile for current user\"\"\"\n",
    "        # This would open a form similar to the add official form\n",
    "        # but specifically for the current user\n",
    "        pass\n",
    "    \n",
    "    def update_official_profile(self):\n",
    "        \"\"\"Update official profile\"\"\"\n",
    "        name = self.profile_name_entry.get().strip()\n",
    "        email = self.profile_email_entry.get().strip()\n",
    "        phone = self.profile_phone_entry.get().strip()\n",
    "        certifications = self.profile_cert_text.get('1.0', tk.END).strip()\n",
    "        experience = self.profile_exp_var.get()\n",
    "        availability = self.profile_avail_text.get('1.0', tk.END).strip()\n",
    "        \n",
    "        try:\n",
    "            self.cursor.execute(\"\"\"\n",
    "                UPDATE officials SET name = ?, email = ?, phone = ?, \n",
    "                certifications = ?, experience_level = ?, availability = ?\n",
    "                WHERE id = ?\n",
    "            \"\"\", (name, email, phone, certifications, experience, availability, self.current_official_id))\n",
    "            \n",
    "            self.conn.commit()\n",
    "            messagebox.showinfo(\"Success\", \"Profile updated successfully\")\n",
    "            \n",
    "        except sqlite3.Error as e:\n",
    "            messagebox.showerror(\"Error\", f\"Failed to update profile: {str(e)}\")\n",
    "    \n",
    "    def create_my_games_tab(self):\n",
    "        \"\"\"Create games tab for officials\"\"\"\n",
    "        games_frame = ttk.Frame(self.notebook)\n",
    "        self.notebook.add(games_frame, text=\"My Games\")\n",
    "        \n",
    "        tk.Label(games_frame, text=\"My Assigned Games\", font=('Arial', 18, 'bold')).pack(pady=20)\n",
    "        \n",
    "        # Games treeview\n",
    "        columns = ('Date', 'Time', 'Teams', 'Location', 'Position', 'Status')\n",
    "        self.my_games_tree = ttk.Treeview(games_frame, columns=columns, show='headings', height=20)\n",
    "        \n",
    "        for col in columns:\n",
    "            self.my_games_tree.heading(col, text=col)\n",
    "            if col in ['Date', 'Time', 'Position', 'Status']:\n",
    "                self.my_games_tree.column(col, width=100)\n",
    "            else:\n",
    "                self.my_games_tree.column(col, width=200)\n",
    "        \n",
    "        # Scrollbar\n",
    "        v_scrollbar = ttk.Scrollbar(games_frame, orient='vertical', command=self.my_games_tree.yview)\n",
    "        self.my_games_tree.configure(yscrollcommand=v_scrollbar.set)\n",
    "        \n",
    "        self.my_games_tree.pack(side='left', fill='both', expand=True, padx=20, pady=5)\n",
    "        v_scrollbar.pack(side='right', fill='y', padx=(0, 20), pady=5)\n",
    "        \n",
    "        # Load official's games\n",
    "        self.refresh_my_games()\n",
    "    \n",
    "    def refresh_my_games(self):\n",
    "        \"\"\"Refresh official's games\"\"\"\n",
    "        for item in self.my_games_tree.get_children():\n",
    "            self.my_games_tree.delete(item)\n",
    "        \n",
    "        # Get official ID\n",
    "        self.cursor.execute(\"SELECT id FROM officials WHERE name = ?\", (self.current_user,))\n",
    "        official_record = self.cursor.fetchone()\n",
    "        \n",
    "        if not official_record:\n",
    "            return\n",
    "        \n",
    "        official_id = official_record[0]\n",
    "        \n",
    "        # Get assignments\n",
    "        self.cursor.execute(\"\"\"\n",
    "            SELECT g.date, g.time, g.home_team || ' vs ' || g.away_team as teams,\n",
    "                   g.location, a.position, a.status\n",
    "            FROM assignments a\n",
    "            JOIN games g ON a.game_id = g.id\n",
    "            WHERE a.official_id = ?\n",
    "            ORDER BY g.date, g.time\n",
    "        \"\"\", (official_id,))\n",
    "        \n",
    "        games = self.cursor.fetchall()\n",
    "        \n",
    "        for game in games:\n",
    "            self.my_games_tree.insert('', 'end', values=game)\n",
    "    \n",
    "    def change_password(self):\n",
    "        \"\"\"Change user password\"\"\"\n",
    "        change_window = tk.Toplevel(self.root)\n",
    "        change_window.title(\"Change Password\")\n",
    "        change_window.geometry(\"350x250\")\n",
    "        change_window.resizable(False, False)\n",
    "        \n",
    "        tk.Label(change_window, text=\"Change Password\", font=('Arial', 16, 'bold')).pack(pady=20)\n",
    "        \n",
    "        tk.Label(change_window, text=\"Current Password:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        current_password_entry = tk.Entry(change_window, show='*', width=30)\n",
    "        current_password_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(change_window, text=\"New Password:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        new_password_entry = tk.Entry(change_window, show='*', width=30)\n",
    "        new_password_entry.pack(pady=5)\n",
    "        \n",
    "        tk.Label(change_window, text=\"Confirm New Password:\", font=('Arial', 10, 'bold')).pack(pady=5)\n",
    "        confirm_password_entry = tk.Entry(change_window, show='*', width=30)\n",
    "        confirm_password_entry.pack(pady=5)\n",
    "        \n",
    "        def update_password():\n",
    "            current_password = current_password_entry.get()\n",
    "            new_password = new_password_entry.get()\n",
    "            confirm_password = confirm_password_entry.get()\n",
    "            \n",
    "            if not all([current_password, new_password, confirm_password]):\n",
    "                messagebox.showerror(\"Error\", \"All fields are required\")\n",
    "                return\n",
    "            \n",
    "            # Verify current password\n",
    "            hashed_current = hashlib.sha256(current_password.encode()).hexdigest()\n",
    "            self.cursor.execute(\"SELECT password FROM users WHERE username = ?\", (self.current_user,))\n",
    "            stored_password = self.cursor.fetchone()[0]\n",
    "            \n",
    "            if hashed_current != stored_password:\n",
    "                messagebox.showerror(\"Error\", \"Current password is incorrect\")\n",
    "                return\n",
    "            \n",
    "            if new_password != confirm_password:\n",
    "                messagebox.showerror(\"Error\", \"New passwords do not match\")\n",
    "                return\n",
    "            \n",
    "            if len(new_password) < 6:\n",
    "                messagebox.showerror(\"Error\", \"Password must be at least 6 characters long\")\n",
    "                return\n",
    "            \n",
    "            try:\n",
    "                hashed_new = hashlib.sha256(new_password.encode()).hexdigest()\n",
    "                self.cursor.execute(\"UPDATE users SET password = ? WHERE username = ?\", \n",
    "                                   (hashed_new, self.current_user))\n",
    "                self.conn.commit()\n",
    "                messagebox.showinfo(\"Success\", \"Password changed successfully\")\n",
    "                change_window.destroy()\n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Error\", f\"Failed to change password: {str(e)}\")\n",
    "        \n",
    "        tk.Button(change_window, text=\"Update Password\", command=update_password,\n",
    "                 bg='#3498db', fg='white', font=('Arial', 12, 'bold')).pack(pady=20)\n",
    "    \n",
    "    def show_help(self):\n",
    "        \"\"\"Show help window with role-based content\"\"\"\n",
    "        help_window = tk.Toplevel(self.root)\n",
    "        help_window.title(\"User Guide\")\n",
    "        help_window.geometry(\"900x700\")\n",
    "        \n",
    "        # Create notebook for help sections\n",
    "        help_notebook = ttk.Notebook(help_window)\n",
    "        help_notebook.pack(fill='both', expand=True, padx=10, pady=10)\n",
    "        \n",
    "        # Search frame\n",
    "        search_frame = tk.Frame(help_window)\n",
    "        search_frame.pack(fill='x', padx=10, pady=5)\n",
    "        \n",
    "        tk.Label(search_frame, text=\"Search Help:\", font=('Arial', 10, 'bold')).pack(side='left')\n",
    "        search_entry = tk.Entry(search_frame, width=30)\n",
    "        search_entry.pack(side='left', padx=5)\n",
    "        \n",
    "        def search_help():\n",
    "            search_term = search_entry.get().lower()\n",
    "            if not search_term:\n",
    "                return\n",
    "            \n",
    "            # Simple search through help content\n",
    "            for tab_id in help_notebook.tabs():\n",
    "                tab = help_notebook.nametowidget(tab_id)\n",
    "                for widget in tab.winfo_children():\n",
    "                    if isinstance(widget, tk.Text):\n",
    "                        content = widget.get('1.0', tk.END).lower()\n",
    "                        if search_term in content:\n",
    "                            help_notebook.select(tab_id)\n",
    "                            # Highlight search term (simplified)\n",
    "                            start_pos = content.find(search_term)\n",
    "                            if start_pos != -1:\n",
    "                                widget.tag_remove('highlight', '1.0', tk.END)\n",
    "                                widget.tag_add('highlight', f'1.0+{start_pos}c', f'1.0+{start_pos + len(search_term)}c')\n",
    "                                widget.tag_config('highlight', background='yellow')\n",
    "                            return\n",
    "        \n",
    "        tk.Button(search_frame, text=\"Search\", command=search_help,\n",
    "                 bg='#3498db', fg='white').pack(side='left', padx=5)\n",
    "        \n",
    "        # Help content based on user role\n",
    "        help_content = self.get_help_content()\n",
    "        \n",
    "        for section_title, content in help_content.items():\n",
    "            # Create tab for each section\n",
    "            tab_frame = ttk.Frame(help_notebook)\n",
    "            help_notebook.add(tab_frame, text=section_title)\n",
    "            \n",
    "            # Add scrollable text widget\n",
    "            text_widget = tk.Text(tab_frame, wrap=tk.WORD, font=('Arial', 11))\n",
    "            scrollbar = ttk.Scrollbar(tab_frame, orient='vertical', command=text_widget.yview)\n",
    "            text_widget.configure(yscrollcommand=scrollbar.set)\n",
    "            \n",
    "            text_widget.pack(side='left', fill='both', expand=True, padx=5, pady=5)\n",
    "            scrollbar.pack(side='right', fill='y', pady=5)\n",
    "            \n",
    "            # Insert content\n",
    "            text_widget.insert('1.0', content)\n",
    "            text_widget.config(state='disabled')  # Make read-only\n",
    "    \n",
    "    def get_help_content(self):\n",
    "        \"\"\"Get help content based on user role\"\"\"\n",
    "        \n",
    "        # Common help content\n",
    "        common_help = {\n",
    "            \"Getting Started\": \"\"\"\n",
    "GETTING STARTED WITH SPORTS OFFICIAL SCHEDULER\n",
    "\n",
    "Welcome to the Sports Official Scheduler! This application helps manage sports games, officials, and assignments efficiently.\n",
    "\n",
    "LOGIN:\n",
    "- Use your assigned username and password to log in\n",
    "- Contact your administrator if you've forgotten your credentials\n",
    "- Your role determines which features you can access\n",
    "\n",
    "NAVIGATION:\n",
    "- Use the tabs at the top to navigate between different sections\n",
    "- Each tab contains specific functionality for managing different aspects\n",
    "- The welcome bar shows your current user and role\n",
    "\n",
    "CHANGING PASSWORD:\n",
    "1. Go to File menu > Change Password\n",
    "2. Enter your current password\n",
    "3. Enter and confirm your new password (minimum 6 characters)\n",
    "4. Click Update Password\n",
    "\n",
    "LOGGING OUT:\n",
    "- Use the Logout button in the top-right corner\n",
    "- Or go to File menu > Logout\n",
    "- Always log out when finished to maintain security\n",
    "\"\"\",\n",
    "            \n",
    "            \"FAQ\": \"\"\"\n",
    "FREQUENTLY ASKED QUESTIONS\n",
    "\n",
    "Q: I forgot my password. What should I do?\n",
    "A: Contact your system administrator. They can reset your password for you.\n",
    "\n",
    "Q: How do I update my profile information?\n",
    "A: If you're an official, use the \"My Profile\" tab. Other users should contact their administrator.\n",
    "\n",
    "Q: Can I view assignments from my mobile device?\n",
    "A: This is a desktop application. Contact your administrator about mobile access options.\n",
    "\n",
    "Q: How do I report a problem or bug?\n",
    "A: Contact your system administrator with details about the issue you encountered.\n",
    "\n",
    "Q: Can I export my data?\n",
    "A: Yes, most data can be exported to CSV format using the export buttons in each section.\n",
    "\n",
    "Q: How are assignments made?\n",
    "A: Assignments can be made individually or in bulk by administrators and assigners.\n",
    "\n",
    "Q: What if I can't work a specific game?\n",
    "A: Update your availability in your profile, or contact your assigner directly.\n",
    "\n",
    "Q: How do I see all games I'm assigned to?\n",
    "A: Officials can use the \"My Games\" tab to see all their assignments.\n",
    "\"\"\"\n",
    "        }\n",
    "        \n",
    "        # Role-specific help content\n",
    "        if self.current_role == 'superadmin':\n",
    "            admin_help = {\n",
    "                \"System Administration\": \"\"\"\n",
    "SYSTEM ADMINISTRATION GUIDE\n",
    "\n",
    "As a Super Administrator, you have full access to all system features:\n",
    "\n",
    "USER MANAGEMENT:\n",
    "- Add, edit, and delete user accounts\n",
    "- Reset passwords for any user\n",
    "- Assign roles: admin, assigner, official\n",
    "- Manage user groups and permissions\n",
    "\n",
    "DATABASE MANAGEMENT:\n",
    "- Monitor system statistics on the Dashboard\n",
    "- Export all data for backup purposes\n",
    "- Import data from CSV files\n",
    "- Maintain data integrity\n",
    "\n",
    "SECURITY:\n",
    "- Regularly review user accounts\n",
    "- Monitor login activities\n",
    "- Ensure proper role assignments\n",
    "- Backup data regularly\n",
    "\n",
    "SYSTEM MONITORING:\n",
    "- Check dashboard statistics regularly\n",
    "- Review recent system activities\n",
    "- Monitor assignment completion rates\n",
    "- Ensure system performance\n",
    "\"\"\",\n",
    "                \n",
    "                \"User & Group Management\": \"\"\"\n",
    "USER AND GROUP MANAGEMENT\n",
    "\n",
    "ADDING USERS:\n",
    "1. Go to Users tab\n",
    "2. Click \"Add User\"\n",
    "3. Fill in required information:\n",
    "   - Username (unique)\n",
    "   - Password (minimum 6 characters)\n",
    "   - Role (admin, assigner, official)\n",
    "   - Contact information\n",
    "4. Click \"Add User\"\n",
    "\n",
    "EDITING USERS:\n",
    "1. Select user from the list\n",
    "2. Click \"Edit User\"  \n",
    "3. Modify information as needed\n",
    "4. Click \"Update User\"\n",
    "\n",
    "RESETTING PASSWORDS:\n",
    "1. Select user from the list\n",
    "2. Click \"Reset Password\"\n",
    "3. Enter new password twice\n",
    "4. Click \"Reset Password\"\n",
    "\n",
    "GROUP MANAGEMENT:\n",
    "1. Go to Groups tab\n",
    "2. Create groups for organizing users\n",
    "3. Use \"Manage Members\" to add/remove users\n",
    "4. Groups help organize permissions and access\n",
    "\"\"\"\n",
    "            }\n",
    "            common_help.update(admin_help)\n",
    "        \n",
    "        elif self.current_role == 'admin':\n",
    "            admin_help = {\n",
    "                \"Games Management\": \"\"\"\n",
    "GAMES MANAGEMENT GUIDE\n",
    "\n",
    "ADDING SINGLE GAMES:\n",
    "1. Go to Games tab\n",
    "2. Click \"Add Game\"\n",
    "3. Fill in game details:\n",
    "   - Date (YYYY-MM-DD format)\n",
    "   - Time (HH:MM format)\n",
    "   - Home and away teams\n",
    "   - Location (select from dropdown)\n",
    "   - Sport and league\n",
    "   - Number of officials needed\n",
    "4. Click \"Add Game\"\n",
    "\n",
    "ADDING MULTIPLE GAMES:\n",
    "1. Click \"Add Multiple Games\"\n",
    "2. Enter common details (teams, location, sport)\n",
    "3. List dates and times (one per line)\n",
    "4. Format: YYYY-MM-DD HH:MM\n",
    "5. Click \"Create Games\"\n",
    "\n",
    "LINKING GAMES:\n",
    "1. Click \"Link Games\"\n",
    "2. Select multiple related games\n",
    "3. Enter a group name\n",
    "4. Click \"Link Games\"\n",
    "5. Linked games can be assigned together\n",
    "\n",
    "IMPORTING GAMES:\n",
    "1. Prepare CSV file with columns:\n",
    "   - date, time, home_team, away_team, location, sport\n",
    "2. Click \"Import CSV\"\n",
    "3. Select your file\n",
    "4. Games will be imported automatically\n",
    "\"\"\",\n",
    "                \n",
    "                \"Officials Management\": \"\"\"\n",
    "OFFICIALS MANAGEMENT GUIDE\n",
    "\n",
    "ADDING OFFICIALS:\n",
    "1. Go to Officials tab\n",
    "2. Click \"Add Official\"\n",
    "3. Enter official information:\n",
    "   - Name (required)\n",
    "   - Contact information\n",
    "   - Certifications\n",
    "   - Experience level\n",
    "   - Availability notes\n",
    "4. Click \"Add Official\"\n",
    "\n",
    "EDITING OFFICIALS:\n",
    "1. Select official from list\n",
    "2. Click \"Edit Official\"\n",
    "3. Update information as needed\n",
    "4. Click \"Update Official\"\n",
    "\n",
    "IMPORTING OFFICIALS:\n",
    "1. Prepare CSV with columns:\n",
    "   - name, email, phone, certifications, experience_level, availability\n",
    "2. Click \"Import CSV\"\n",
    "3. Select file and import\n",
    "\n",
    "MANAGING AVAILABILITY:\n",
    "- Officials can update their own availability\n",
    "- Administrators can edit availability for any official\n",
    "- Use availability notes for scheduling preferences\n",
    "\"\"\"\n",
    "            }\n",
    "            common_help.update(admin_help)\n",
    "        \n",
    "        elif self.current_role == 'assigner':\n",
    "            assigner_help = {\n",
    "                \"Assignment Management\": \"\"\"\n",
    "ASSIGNMENT MANAGEMENT GUIDE\n",
    "\n",
    "CREATING INDIVIDUAL ASSIGNMENTS:\n",
    "1. Go to Assignments tab\n",
    "2. Click \"Create Assignment\"\n",
    "3. Select game from dropdown\n",
    "4. Select official from dropdown\n",
    "5. Choose position (Referee, Umpire, etc.)\n",
    "6. Set status (assigned, confirmed, etc.)\n",
    "7. Click \"Create Assignment\"\n",
    "\n",
    "BULK ASSIGNMENTS:\n",
    "1. Click \"Bulk Assign\"\n",
    "2. Select multiple games from left list\n",
    "3. Select multiple officials from right list\n",
    "4. Choose default position\n",
    "5. Click \"Create Assignments\"\n",
    "6. System creates all combinations\n",
    "\n",
    "ASSIGNING TO LINKED GAMES:\n",
    "1. Click \"Assign to Linked Games\"\n",
    "2. Select a linked game group\n",
    "3. Select officials to assign\n",
    "4. Choose position\n",
    "5. Click \"Assign to All Games\"\n",
    "6. Officials are assigned to entire series\n",
    "\n",
    "MANAGING CONFLICTS:\n",
    "- System prevents double-booking officials\n",
    "- Check official availability before assigning\n",
    "- Use assignment status to track confirmations\n",
    "- Edit assignments as needed for changes\n",
    "\"\"\",\n",
    "                \n",
    "                \"Assignment Best Practices\": \"\"\"\n",
    "ASSIGNMENT BEST PRACTICES\n",
    "\n",
    "BEFORE ASSIGNING:\n",
    "- Check official availability\n",
    "- Consider travel distance to venues\n",
    "- Match experience level to game level\n",
    "- Avoid conflicts with other assignments\n",
    "\n",
    "ASSIGNMENT WORKFLOW:\n",
    "1. Create assignment (status: assigned)\n",
    "2. Contact official for confirmation\n",
    "3. Update status to confirmed/declined\n",
    "4. Make alternate assignments if declined\n",
    "5. Mark completed after game\n",
    "\n",
    "CONFLICT RESOLUTION:\n",
    "- System prevents double assignments\n",
    "- Check availability notes before assigning\n",
    "- Communicate changes promptly\n",
    "- Keep backup officials in mind\n",
    "\n",
    "COMMUNICATION:\n",
    "- Update assignment status promptly\n",
    "- Use notes field for special instructions\n",
    "- Export assignments for distribution\n",
    "- Follow up on unconfirmed assignments\n",
    "\"\"\"\n",
    "            }\n",
    "            common_help.update(assigner_help)\n",
    "        \n",
    "        elif self.current_role == 'official':\n",
    "            official_help = {\n",
    "                \"Profile Management\": \"\"\"\n",
    "PROFILE MANAGEMENT FOR OFFICIALS\n",
    "\n",
    "UPDATING YOUR PROFILE:\n",
    "1. Go to \"My Profile\" tab\n",
    "2. Update your information:\n",
    "   - Contact information\n",
    "   - Certifications\n",
    "   - Experience level\n",
    "   - Availability preferences\n",
    "3. Click \"Update Profile\"\n",
    "\n",
    "AVAILABILITY MANAGEMENT:\n",
    "- Keep availability current\n",
    "- Include specific dates unavailable\n",
    "- Note preferred days/times\n",
    "- Update seasonal availability\n",
    "- Mention travel limitations\n",
    "\n",
    "CERTIFICATION TRACKING:\n",
    "- List all current certifications\n",
    "- Include expiration dates\n",
    "- Note renewal requirements\n",
    "- Update when new certifications earned\n",
    "\n",
    "CONTACT INFORMATION:\n",
    "- Keep email current for notifications\n",
    "- Provide reliable phone number\n",
    "- Update address if you move\n",
    "- Ensure information is accurate\n",
    "\"\"\",\n",
    "                \n",
    "                \"Viewing Assignments\": \"\"\"\n",
    "VIEWING YOUR ASSIGNMENTS\n",
    "\n",
    "MY GAMES TAB:\n",
    "- Shows all your current assignments\n",
    "- Displays date, time, teams, location\n",
    "- Shows your position for each game\n",
    "- Indicates assignment status\n",
    "\n",
    "ASSIGNMENT STATUS:\n",
    "- Assigned: Initial assignment made\n",
    "- Confirmed: You've confirmed availability\n",
    "- Declined: Assignment declined\n",
    "- Completed: Game finished\n",
    "\n",
    "MANAGING YOUR SCHEDULE:\n",
    "- Review assignments regularly\n",
    "- Note any conflicts immediately\n",
    "- Contact assigner about problems\n",
    "- Update availability proactively\n",
    "\n",
    "GAME PREPARATION:\n",
    "- Note game location and time\n",
    "- Review any special requirements\n",
    "- Confirm travel arrangements\n",
    "- Prepare necessary equipment\n",
    "\"\"\"\n",
    "            }\n",
    "            common_help.update(official_help)\n",
    "        \n",
    "        return common_help\n",
    "    \n",
    "    def show_about(self):\n",
    "        \"\"\"Show about dialog\"\"\"\n",
    "        about_text = \"\"\"\n",
    "Sports Official Scheduler\n",
    "Version 2.0\n",
    "\n",
    "A comprehensive solution for managing sports games, \n",
    "officials, and assignments.\n",
    "\n",
    "Features:\n",
    "• User and group management\n",
    "• Games and officials tracking\n",
    "• Assignment coordination\n",
    "• Reporting and analytics\n",
    "• CSV import/export\n",
    "• Role-based access control\n",
    "\n",
    "Developed for sports organizations to streamline\n",
    "the scheduling and management of officials.\n",
    "\n",
    "© 2024 Sports Official Scheduler\n",
    "        \"\"\"\n",
    "        \n",
    "        messagebox.showinfo(\"About\", about_text)\n",
    "    \n",
    "    def logout(self):\n",
    "        \"\"\"Logout current user\"\"\"\n",
    "        self.current_user = None\n",
    "        self.current_role = None\n",
    "        self.show_login()\n",
    "    \n",
    "    def run(self):\n",
    "        \"\"\"Run the application\"\"\"\n",
    "        self.root.mainloop()\n",
    "        \n",
    "    def __del__(self):\n",
    "        \"\"\"Close database connection\"\"\"\n",
    "        if hasattr(self, 'conn'):\n",
    "            self.conn.close()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    app = SportsOfficialScheduler()\n",
    "    app.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d89fa4b4-23c5-4892-90ea-0a0c278f77dc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6938ca81-d1dc-4cf7-941d-d7eaa5194792",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "raw",
   "id": "48576950-4b12-4515-b458-6902bddad596",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "raw",
   "id": "069be388-e6ae-4562-9cef-650c95c9920e",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
